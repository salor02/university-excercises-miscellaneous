Starting parse
Entering state 0
Reading a token: --(end of buffer or a NUL)
--accepting rule at line 54 ("def")
Next token is token "def" (test.k:1.1-3: )
Shifting token "def" (test.k:1.1-3: )
Entering state 3
Reading a token: --accepting rule at line 34 (" ")
--accepting rule at line 57 ("ciccio")
Next token is token "id" (test.k:1.5-10: )
Shifting token "id" (test.k:1.5-10: )
Entering state 14
Reading a token: --accepting rule at line 41 ("(")
Next token is token "(" (test.k:1.11: )
Shifting token "(" (test.k:1.11: )
Entering state 25
Reading a token: --accepting rule at line 57 ("a")
Next token is token "id" (test.k:1.12: )
Shifting token "id" (test.k:1.12: )
Entering state 35
Reading a token: --accepting rule at line 34 (" ")
--accepting rule at line 57 ("b")
Next token is token "id" (test.k:1.14: )
Shifting token "id" (test.k:1.14: )
Entering state 35
Reading a token: --accepting rule at line 42 (")")
Next token is token ")" (test.k:1.15: )
Reducing stack by rule 11 (line 91):
-> $$ = nterm idseq (test.k:1.15: )
Stack now 35 35 25 14 3 0
Entering state 39
Reducing stack by rule 12 (line 93):
   $1 = token "id" (test.k:1.14: )
   $2 = nterm idseq (test.k:1.15: )
-> $$ = nterm idseq (test.k:1.14: )
Stack now 35 25 14 3 0
Entering state 39
Reducing stack by rule 12 (line 93):
   $1 = token "id" (test.k:1.12: )
   $2 = nterm idseq (test.k:1.14: )
-> $$ = nterm idseq (test.k:1.12-14: )
Stack now 25 14 3 0
Entering state 36
Next token is token ")" (test.k:1.15: )
Shifting token ")" (test.k:1.15: )
Entering state 40
Reducing stack by rule 10 (line 88):
   $1 = token "id" (test.k:1.5-10: )
   $2 = token "(" (test.k:1.11: )
   $3 = nterm idseq (test.k:1.12-14: )
   $4 = token ")" (test.k:1.15: )
-> $$ = nterm proto (test.k:1.5-15: )
Stack now 3 0
Entering state 16
Reading a token: --accepting rule at line 34 (" ")
--accepting rule at line 46 ("2")
Next token is token "number" (test.k:1.17: )
Shifting token "number" (test.k:1.17: )
Entering state 5
Reducing stack by rule 19 (line 106):
   $1 = token "number" (test.k:1.17: )
-> $$ = nterm exp (test.k:1.17: )
Stack now 16 3 0
Entering state 26
Reading a token: --accepting rule at line 38 ("+")
Next token is token "+" (test.k:1.18: )
Shifting token "+" (test.k:1.18: )
Entering state 21
Reading a token: --accepting rule at line 46 ("1")
Next token is token "number" (test.k:1.19: )
Shifting token "number" (test.k:1.19: )
Entering state 5
Reducing stack by rule 19 (line 106):
   $1 = token "number" (test.k:1.19: )
-> $$ = nterm exp (test.k:1.19: )
Stack now 21 26 16 3 0
Entering state 32
Reading a token: --accepting rule at line 43 (";")
Next token is token ";" (test.k:1.20: )
Reducing stack by rule 13 (line 100):
   $1 = nterm exp (test.k:1.17: )
   $2 = token "+" (test.k:1.18: )
   $3 = nterm exp (test.k:1.19: )
-> $$ = nterm exp (test.k:1.17-19: )
Stack now 16 3 0
Entering state 26
Next token is token ";" (test.k:1.20: )
Reducing stack by rule 8 (line 82):
   $1 = token "def" (test.k:1.1-3: )
   $2 = nterm proto (test.k:1.5-15: )
   $3 = nterm exp (test.k:1.17-19: )
-> $$ = nterm definition (test.k:1.1-19: )
Stack now 0
Entering state 9
Reducing stack by rule 5 (line 77):
   $1 = nterm definition (test.k:1.1-19: )
-> $$ = nterm top (test.k:1.1-19: )
Stack now 0
Entering state 8
Next token is token ";" (test.k:1.20: )
Shifting token ";" (test.k:1.20: )
Entering state 19
Reading a token: --(end of buffer or a NUL)
--accepting rule at line 35 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
Next token is token "end of file" (test.k:2.1: )
Reducing stack by rule 2 (line 72):
-> $$ = nterm program (test.k:1.21: )
Stack now 19 8 0
Entering state 30
Reducing stack by rule 3 (line 73):
   $1 = nterm top (test.k:1.1-19: )
   $2 = token ";" (test.k:1.20: )
   $3 = nterm program (test.k:1.21: )
-> $$ = nterm program (test.k:1.1-20: )
Stack now 0
Entering state 7
Reducing stack by rule 1 (line 69):
   $1 = nterm program (test.k:1.1-20: )
-> $$ = nterm startsymb (test.k:1.1-20: )
Stack now 0
Entering state 6
Next token is token "end of file" (test.k:2.1: )
Shifting token "end of file" (test.k:2.1: )
Entering state 18
Cleanup: popping token "end of file" (test.k:2.1: )
Cleanup: popping nterm startsymb (test.k:1.1-20: )

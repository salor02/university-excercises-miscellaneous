// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=536604,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=8,HLS_SYN_FF=2601,HLS_SYN_LUT=3166,HLS_VERSION=2020_1}" *)

module mmult (
        ap_clk,
        ap_rst_n,
        m_axi_in1_mem_AWVALID,
        m_axi_in1_mem_AWREADY,
        m_axi_in1_mem_AWADDR,
        m_axi_in1_mem_AWID,
        m_axi_in1_mem_AWLEN,
        m_axi_in1_mem_AWSIZE,
        m_axi_in1_mem_AWBURST,
        m_axi_in1_mem_AWLOCK,
        m_axi_in1_mem_AWCACHE,
        m_axi_in1_mem_AWPROT,
        m_axi_in1_mem_AWQOS,
        m_axi_in1_mem_AWREGION,
        m_axi_in1_mem_AWUSER,
        m_axi_in1_mem_WVALID,
        m_axi_in1_mem_WREADY,
        m_axi_in1_mem_WDATA,
        m_axi_in1_mem_WSTRB,
        m_axi_in1_mem_WLAST,
        m_axi_in1_mem_WID,
        m_axi_in1_mem_WUSER,
        m_axi_in1_mem_ARVALID,
        m_axi_in1_mem_ARREADY,
        m_axi_in1_mem_ARADDR,
        m_axi_in1_mem_ARID,
        m_axi_in1_mem_ARLEN,
        m_axi_in1_mem_ARSIZE,
        m_axi_in1_mem_ARBURST,
        m_axi_in1_mem_ARLOCK,
        m_axi_in1_mem_ARCACHE,
        m_axi_in1_mem_ARPROT,
        m_axi_in1_mem_ARQOS,
        m_axi_in1_mem_ARREGION,
        m_axi_in1_mem_ARUSER,
        m_axi_in1_mem_RVALID,
        m_axi_in1_mem_RREADY,
        m_axi_in1_mem_RDATA,
        m_axi_in1_mem_RLAST,
        m_axi_in1_mem_RID,
        m_axi_in1_mem_RUSER,
        m_axi_in1_mem_RRESP,
        m_axi_in1_mem_BVALID,
        m_axi_in1_mem_BREADY,
        m_axi_in1_mem_BRESP,
        m_axi_in1_mem_BID,
        m_axi_in1_mem_BUSER,
        m_axi_in2_mem_AWVALID,
        m_axi_in2_mem_AWREADY,
        m_axi_in2_mem_AWADDR,
        m_axi_in2_mem_AWID,
        m_axi_in2_mem_AWLEN,
        m_axi_in2_mem_AWSIZE,
        m_axi_in2_mem_AWBURST,
        m_axi_in2_mem_AWLOCK,
        m_axi_in2_mem_AWCACHE,
        m_axi_in2_mem_AWPROT,
        m_axi_in2_mem_AWQOS,
        m_axi_in2_mem_AWREGION,
        m_axi_in2_mem_AWUSER,
        m_axi_in2_mem_WVALID,
        m_axi_in2_mem_WREADY,
        m_axi_in2_mem_WDATA,
        m_axi_in2_mem_WSTRB,
        m_axi_in2_mem_WLAST,
        m_axi_in2_mem_WID,
        m_axi_in2_mem_WUSER,
        m_axi_in2_mem_ARVALID,
        m_axi_in2_mem_ARREADY,
        m_axi_in2_mem_ARADDR,
        m_axi_in2_mem_ARID,
        m_axi_in2_mem_ARLEN,
        m_axi_in2_mem_ARSIZE,
        m_axi_in2_mem_ARBURST,
        m_axi_in2_mem_ARLOCK,
        m_axi_in2_mem_ARCACHE,
        m_axi_in2_mem_ARPROT,
        m_axi_in2_mem_ARQOS,
        m_axi_in2_mem_ARREGION,
        m_axi_in2_mem_ARUSER,
        m_axi_in2_mem_RVALID,
        m_axi_in2_mem_RREADY,
        m_axi_in2_mem_RDATA,
        m_axi_in2_mem_RLAST,
        m_axi_in2_mem_RID,
        m_axi_in2_mem_RUSER,
        m_axi_in2_mem_RRESP,
        m_axi_in2_mem_BVALID,
        m_axi_in2_mem_BREADY,
        m_axi_in2_mem_BRESP,
        m_axi_in2_mem_BID,
        m_axi_in2_mem_BUSER,
        m_axi_out_mem_AWVALID,
        m_axi_out_mem_AWREADY,
        m_axi_out_mem_AWADDR,
        m_axi_out_mem_AWID,
        m_axi_out_mem_AWLEN,
        m_axi_out_mem_AWSIZE,
        m_axi_out_mem_AWBURST,
        m_axi_out_mem_AWLOCK,
        m_axi_out_mem_AWCACHE,
        m_axi_out_mem_AWPROT,
        m_axi_out_mem_AWQOS,
        m_axi_out_mem_AWREGION,
        m_axi_out_mem_AWUSER,
        m_axi_out_mem_WVALID,
        m_axi_out_mem_WREADY,
        m_axi_out_mem_WDATA,
        m_axi_out_mem_WSTRB,
        m_axi_out_mem_WLAST,
        m_axi_out_mem_WID,
        m_axi_out_mem_WUSER,
        m_axi_out_mem_ARVALID,
        m_axi_out_mem_ARREADY,
        m_axi_out_mem_ARADDR,
        m_axi_out_mem_ARID,
        m_axi_out_mem_ARLEN,
        m_axi_out_mem_ARSIZE,
        m_axi_out_mem_ARBURST,
        m_axi_out_mem_ARLOCK,
        m_axi_out_mem_ARCACHE,
        m_axi_out_mem_ARPROT,
        m_axi_out_mem_ARQOS,
        m_axi_out_mem_ARREGION,
        m_axi_out_mem_ARUSER,
        m_axi_out_mem_RVALID,
        m_axi_out_mem_RREADY,
        m_axi_out_mem_RDATA,
        m_axi_out_mem_RLAST,
        m_axi_out_mem_RID,
        m_axi_out_mem_RUSER,
        m_axi_out_mem_RRESP,
        m_axi_out_mem_BVALID,
        m_axi_out_mem_BREADY,
        m_axi_out_mem_BRESP,
        m_axi_out_mem_BID,
        m_axi_out_mem_BUSER,
        s_axi_params_AWVALID,
        s_axi_params_AWREADY,
        s_axi_params_AWADDR,
        s_axi_params_WVALID,
        s_axi_params_WREADY,
        s_axi_params_WDATA,
        s_axi_params_WSTRB,
        s_axi_params_ARVALID,
        s_axi_params_ARREADY,
        s_axi_params_ARADDR,
        s_axi_params_RVALID,
        s_axi_params_RREADY,
        s_axi_params_RDATA,
        s_axi_params_RRESP,
        s_axi_params_BVALID,
        s_axi_params_BREADY,
        s_axi_params_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_pp0_stage0 = 27'd256;
parameter    ap_ST_fsm_state12 = 27'd512;
parameter    ap_ST_fsm_state13 = 27'd1024;
parameter    ap_ST_fsm_state14 = 27'd2048;
parameter    ap_ST_fsm_state15 = 27'd4096;
parameter    ap_ST_fsm_state16 = 27'd8192;
parameter    ap_ST_fsm_state17 = 27'd16384;
parameter    ap_ST_fsm_state18 = 27'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 27'd65536;
parameter    ap_ST_fsm_state22 = 27'd131072;
parameter    ap_ST_fsm_state23 = 27'd262144;
parameter    ap_ST_fsm_state24 = 27'd524288;
parameter    ap_ST_fsm_state25 = 27'd1048576;
parameter    ap_ST_fsm_pp3_stage0 = 27'd2097152;
parameter    ap_ST_fsm_state29 = 27'd4194304;
parameter    ap_ST_fsm_state30 = 27'd8388608;
parameter    ap_ST_fsm_state31 = 27'd16777216;
parameter    ap_ST_fsm_state32 = 27'd33554432;
parameter    ap_ST_fsm_state33 = 27'd67108864;
parameter    C_S_AXI_PARAMS_DATA_WIDTH = 32;
parameter    C_S_AXI_PARAMS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN1_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN1_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_IN1_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_USER_VALUE = 0;
parameter    C_M_AXI_IN1_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_IN1_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN2_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN2_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_IN2_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_USER_VALUE = 0;
parameter    C_M_AXI_IN2_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_IN2_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_OUT_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_USER_VALUE = 0;
parameter    C_M_AXI_OUT_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_MEM_CACHE_VALUE = 3;

parameter C_S_AXI_PARAMS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN1_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN2_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_MEM_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_in1_mem_AWVALID;
input   m_axi_in1_mem_AWREADY;
output  [C_M_AXI_IN1_MEM_ADDR_WIDTH - 1:0] m_axi_in1_mem_AWADDR;
output  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_AWID;
output  [7:0] m_axi_in1_mem_AWLEN;
output  [2:0] m_axi_in1_mem_AWSIZE;
output  [1:0] m_axi_in1_mem_AWBURST;
output  [1:0] m_axi_in1_mem_AWLOCK;
output  [3:0] m_axi_in1_mem_AWCACHE;
output  [2:0] m_axi_in1_mem_AWPROT;
output  [3:0] m_axi_in1_mem_AWQOS;
output  [3:0] m_axi_in1_mem_AWREGION;
output  [C_M_AXI_IN1_MEM_AWUSER_WIDTH - 1:0] m_axi_in1_mem_AWUSER;
output   m_axi_in1_mem_WVALID;
input   m_axi_in1_mem_WREADY;
output  [C_M_AXI_IN1_MEM_DATA_WIDTH - 1:0] m_axi_in1_mem_WDATA;
output  [C_M_AXI_IN1_MEM_WSTRB_WIDTH - 1:0] m_axi_in1_mem_WSTRB;
output   m_axi_in1_mem_WLAST;
output  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_WID;
output  [C_M_AXI_IN1_MEM_WUSER_WIDTH - 1:0] m_axi_in1_mem_WUSER;
output   m_axi_in1_mem_ARVALID;
input   m_axi_in1_mem_ARREADY;
output  [C_M_AXI_IN1_MEM_ADDR_WIDTH - 1:0] m_axi_in1_mem_ARADDR;
output  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_ARID;
output  [7:0] m_axi_in1_mem_ARLEN;
output  [2:0] m_axi_in1_mem_ARSIZE;
output  [1:0] m_axi_in1_mem_ARBURST;
output  [1:0] m_axi_in1_mem_ARLOCK;
output  [3:0] m_axi_in1_mem_ARCACHE;
output  [2:0] m_axi_in1_mem_ARPROT;
output  [3:0] m_axi_in1_mem_ARQOS;
output  [3:0] m_axi_in1_mem_ARREGION;
output  [C_M_AXI_IN1_MEM_ARUSER_WIDTH - 1:0] m_axi_in1_mem_ARUSER;
input   m_axi_in1_mem_RVALID;
output   m_axi_in1_mem_RREADY;
input  [C_M_AXI_IN1_MEM_DATA_WIDTH - 1:0] m_axi_in1_mem_RDATA;
input   m_axi_in1_mem_RLAST;
input  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_RID;
input  [C_M_AXI_IN1_MEM_RUSER_WIDTH - 1:0] m_axi_in1_mem_RUSER;
input  [1:0] m_axi_in1_mem_RRESP;
input   m_axi_in1_mem_BVALID;
output   m_axi_in1_mem_BREADY;
input  [1:0] m_axi_in1_mem_BRESP;
input  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_BID;
input  [C_M_AXI_IN1_MEM_BUSER_WIDTH - 1:0] m_axi_in1_mem_BUSER;
output   m_axi_in2_mem_AWVALID;
input   m_axi_in2_mem_AWREADY;
output  [C_M_AXI_IN2_MEM_ADDR_WIDTH - 1:0] m_axi_in2_mem_AWADDR;
output  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_AWID;
output  [7:0] m_axi_in2_mem_AWLEN;
output  [2:0] m_axi_in2_mem_AWSIZE;
output  [1:0] m_axi_in2_mem_AWBURST;
output  [1:0] m_axi_in2_mem_AWLOCK;
output  [3:0] m_axi_in2_mem_AWCACHE;
output  [2:0] m_axi_in2_mem_AWPROT;
output  [3:0] m_axi_in2_mem_AWQOS;
output  [3:0] m_axi_in2_mem_AWREGION;
output  [C_M_AXI_IN2_MEM_AWUSER_WIDTH - 1:0] m_axi_in2_mem_AWUSER;
output   m_axi_in2_mem_WVALID;
input   m_axi_in2_mem_WREADY;
output  [C_M_AXI_IN2_MEM_DATA_WIDTH - 1:0] m_axi_in2_mem_WDATA;
output  [C_M_AXI_IN2_MEM_WSTRB_WIDTH - 1:0] m_axi_in2_mem_WSTRB;
output   m_axi_in2_mem_WLAST;
output  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_WID;
output  [C_M_AXI_IN2_MEM_WUSER_WIDTH - 1:0] m_axi_in2_mem_WUSER;
output   m_axi_in2_mem_ARVALID;
input   m_axi_in2_mem_ARREADY;
output  [C_M_AXI_IN2_MEM_ADDR_WIDTH - 1:0] m_axi_in2_mem_ARADDR;
output  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_ARID;
output  [7:0] m_axi_in2_mem_ARLEN;
output  [2:0] m_axi_in2_mem_ARSIZE;
output  [1:0] m_axi_in2_mem_ARBURST;
output  [1:0] m_axi_in2_mem_ARLOCK;
output  [3:0] m_axi_in2_mem_ARCACHE;
output  [2:0] m_axi_in2_mem_ARPROT;
output  [3:0] m_axi_in2_mem_ARQOS;
output  [3:0] m_axi_in2_mem_ARREGION;
output  [C_M_AXI_IN2_MEM_ARUSER_WIDTH - 1:0] m_axi_in2_mem_ARUSER;
input   m_axi_in2_mem_RVALID;
output   m_axi_in2_mem_RREADY;
input  [C_M_AXI_IN2_MEM_DATA_WIDTH - 1:0] m_axi_in2_mem_RDATA;
input   m_axi_in2_mem_RLAST;
input  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_RID;
input  [C_M_AXI_IN2_MEM_RUSER_WIDTH - 1:0] m_axi_in2_mem_RUSER;
input  [1:0] m_axi_in2_mem_RRESP;
input   m_axi_in2_mem_BVALID;
output   m_axi_in2_mem_BREADY;
input  [1:0] m_axi_in2_mem_BRESP;
input  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_BID;
input  [C_M_AXI_IN2_MEM_BUSER_WIDTH - 1:0] m_axi_in2_mem_BUSER;
output   m_axi_out_mem_AWVALID;
input   m_axi_out_mem_AWREADY;
output  [C_M_AXI_OUT_MEM_ADDR_WIDTH - 1:0] m_axi_out_mem_AWADDR;
output  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_AWID;
output  [7:0] m_axi_out_mem_AWLEN;
output  [2:0] m_axi_out_mem_AWSIZE;
output  [1:0] m_axi_out_mem_AWBURST;
output  [1:0] m_axi_out_mem_AWLOCK;
output  [3:0] m_axi_out_mem_AWCACHE;
output  [2:0] m_axi_out_mem_AWPROT;
output  [3:0] m_axi_out_mem_AWQOS;
output  [3:0] m_axi_out_mem_AWREGION;
output  [C_M_AXI_OUT_MEM_AWUSER_WIDTH - 1:0] m_axi_out_mem_AWUSER;
output   m_axi_out_mem_WVALID;
input   m_axi_out_mem_WREADY;
output  [C_M_AXI_OUT_MEM_DATA_WIDTH - 1:0] m_axi_out_mem_WDATA;
output  [C_M_AXI_OUT_MEM_WSTRB_WIDTH - 1:0] m_axi_out_mem_WSTRB;
output   m_axi_out_mem_WLAST;
output  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_WID;
output  [C_M_AXI_OUT_MEM_WUSER_WIDTH - 1:0] m_axi_out_mem_WUSER;
output   m_axi_out_mem_ARVALID;
input   m_axi_out_mem_ARREADY;
output  [C_M_AXI_OUT_MEM_ADDR_WIDTH - 1:0] m_axi_out_mem_ARADDR;
output  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_ARID;
output  [7:0] m_axi_out_mem_ARLEN;
output  [2:0] m_axi_out_mem_ARSIZE;
output  [1:0] m_axi_out_mem_ARBURST;
output  [1:0] m_axi_out_mem_ARLOCK;
output  [3:0] m_axi_out_mem_ARCACHE;
output  [2:0] m_axi_out_mem_ARPROT;
output  [3:0] m_axi_out_mem_ARQOS;
output  [3:0] m_axi_out_mem_ARREGION;
output  [C_M_AXI_OUT_MEM_ARUSER_WIDTH - 1:0] m_axi_out_mem_ARUSER;
input   m_axi_out_mem_RVALID;
output   m_axi_out_mem_RREADY;
input  [C_M_AXI_OUT_MEM_DATA_WIDTH - 1:0] m_axi_out_mem_RDATA;
input   m_axi_out_mem_RLAST;
input  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_RID;
input  [C_M_AXI_OUT_MEM_RUSER_WIDTH - 1:0] m_axi_out_mem_RUSER;
input  [1:0] m_axi_out_mem_RRESP;
input   m_axi_out_mem_BVALID;
output   m_axi_out_mem_BREADY;
input  [1:0] m_axi_out_mem_BRESP;
input  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_BID;
input  [C_M_AXI_OUT_MEM_BUSER_WIDTH - 1:0] m_axi_out_mem_BUSER;
input   s_axi_params_AWVALID;
output   s_axi_params_AWREADY;
input  [C_S_AXI_PARAMS_ADDR_WIDTH - 1:0] s_axi_params_AWADDR;
input   s_axi_params_WVALID;
output   s_axi_params_WREADY;
input  [C_S_AXI_PARAMS_DATA_WIDTH - 1:0] s_axi_params_WDATA;
input  [C_S_AXI_PARAMS_WSTRB_WIDTH - 1:0] s_axi_params_WSTRB;
input   s_axi_params_ARVALID;
output   s_axi_params_ARREADY;
input  [C_S_AXI_PARAMS_ADDR_WIDTH - 1:0] s_axi_params_ARADDR;
output   s_axi_params_RVALID;
input   s_axi_params_RREADY;
output  [C_S_AXI_PARAMS_DATA_WIDTH - 1:0] s_axi_params_RDATA;
output  [1:0] s_axi_params_RRESP;
output   s_axi_params_BVALID;
input   s_axi_params_BREADY;
output  [1:0] s_axi_params_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in1;
wire   [31:0] in2;
wire   [31:0] out_r;
wire   [31:0] dim;
reg    in1_mem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    in1_mem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln27_reg_748;
reg    in2_mem_blk_n_AR;
wire    ap_CS_fsm_state12;
reg    in2_mem_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln28_reg_762;
reg    out_mem_blk_n_AW;
wire    ap_CS_fsm_state25;
reg    out_mem_blk_n_W;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln42_reg_834;
reg   [0:0] icmp_ln42_reg_834_pp3_iter1_reg;
reg    out_mem_blk_n_B;
wire    ap_CS_fsm_state33;
wire    in1_mem_AWREADY;
wire    in1_mem_WREADY;
reg    in1_mem_ARVALID;
wire    in1_mem_ARREADY;
wire   [31:0] in1_mem_ARADDR;
wire    in1_mem_RVALID;
reg    in1_mem_RREADY;
wire   [31:0] in1_mem_RDATA;
wire    in1_mem_RLAST;
wire   [0:0] in1_mem_RID;
wire   [0:0] in1_mem_RUSER;
wire   [1:0] in1_mem_RRESP;
wire    in1_mem_BVALID;
wire   [1:0] in1_mem_BRESP;
wire   [0:0] in1_mem_BID;
wire   [0:0] in1_mem_BUSER;
wire    in2_mem_AWREADY;
wire    in2_mem_WREADY;
reg    in2_mem_ARVALID;
wire    in2_mem_ARREADY;
wire    in2_mem_RVALID;
reg    in2_mem_RREADY;
wire   [31:0] in2_mem_RDATA;
wire    in2_mem_RLAST;
wire   [0:0] in2_mem_RID;
wire   [0:0] in2_mem_RUSER;
wire   [1:0] in2_mem_RRESP;
wire    in2_mem_BVALID;
wire   [1:0] in2_mem_BRESP;
wire   [0:0] in2_mem_BID;
wire   [0:0] in2_mem_BUSER;
reg    out_mem_AWVALID;
wire    out_mem_AWREADY;
reg    out_mem_WVALID;
wire    out_mem_WREADY;
wire    out_mem_ARREADY;
wire    out_mem_RVALID;
wire   [31:0] out_mem_RDATA;
wire    out_mem_RLAST;
wire   [0:0] out_mem_RID;
wire   [0:0] out_mem_RUSER;
wire   [1:0] out_mem_RRESP;
wire    out_mem_BVALID;
reg    out_mem_BREADY;
wire   [1:0] out_mem_BRESP;
wire   [0:0] out_mem_BID;
wire   [0:0] out_mem_BUSER;
reg   [12:0] phi_ln27_reg_285;
reg   [12:0] phi_ln27_reg_285_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [12:0] phi_ln28_reg_297;
reg   [12:0] phi_ln28_reg_297_pp1_iter1_reg;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [12:0] phi_ln42_reg_364;
reg   [31:0] dim_read_reg_709;
reg   [29:0] out5_reg_715;
reg   [29:0] in_reg_720;
reg   [29:0] in3_reg_725;
reg   [31:0] out_mem_addr_reg_736;
wire    ap_CS_fsm_state8;
reg   [31:0] in2_mem_addr_reg_742;
wire   [0:0] icmp_ln27_fu_433_p2;
reg   [0:0] icmp_ln27_reg_748_pp0_iter1_reg;
wire   [12:0] add_ln27_fu_439_p2;
reg   [12:0] add_ln27_reg_752;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] in1_mem_addr_read_reg_757;
wire   [0:0] icmp_ln28_fu_450_p2;
reg   [0:0] icmp_ln28_reg_762_pp1_iter1_reg;
wire   [12:0] add_ln28_fu_456_p2;
reg   [12:0] add_ln28_reg_766;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] in2_mem_addr_read_reg_771;
wire   [38:0] zext_ln31_fu_474_p1;
reg   [38:0] zext_ln31_reg_776;
wire    ap_CS_fsm_state22;
wire   [69:0] mul_ln31_fu_485_p2;
reg   [69:0] mul_ln31_reg_781;
wire   [69:0] add_ln31_fu_496_p2;
reg   [69:0] add_ln31_reg_789;
wire    ap_CS_fsm_state23;
wire   [30:0] select_ln31_1_fu_521_p3;
reg   [30:0] select_ln31_1_reg_794;
wire   [0:0] icmp_ln31_fu_491_p2;
wire   [6:0] select_ln38_fu_571_p3;
reg   [6:0] select_ln38_reg_799;
reg   [11:0] out_loc_addr_reg_804;
wire   [31:0] select_ln33_fu_614_p3;
reg   [31:0] select_ln33_reg_809;
wire   [38:0] select_ln33_1_fu_666_p3;
reg   [38:0] select_ln33_1_reg_824;
wire   [6:0] k_fu_687_p2;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln42_fu_692_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state26_pp3_stage0_iter0;
wire    ap_block_state27_pp3_stage0_iter1;
wire    ap_block_state28_pp3_stage0_iter2;
reg    ap_block_state28_io;
reg    ap_block_pp3_stage0_11001;
wire   [12:0] add_ln42_fu_698_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [31:0] out_loc_q0;
reg   [31:0] out_loc_load_reg_848;
reg    ap_enable_reg_pp3_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state26;
reg   [11:0] in1_loc_address0;
reg    in1_loc_ce0;
reg    in1_loc_we0;
wire   [31:0] in1_loc_q0;
reg   [11:0] in2_loc_address0;
reg    in2_loc_ce0;
reg    in2_loc_we0;
wire   [31:0] in2_loc_q0;
reg   [11:0] out_loc_address0;
reg    out_loc_ce0;
reg    out_loc_we0;
wire   [31:0] out_loc_d0;
reg   [12:0] ap_phi_mux_phi_ln27_phi_fu_289_p4;
reg   [12:0] ap_phi_mux_phi_ln28_phi_fu_301_p4;
reg   [69:0] indvar_flatten15_reg_309;
reg   [30:0] i_0_reg_320;
reg   [38:0] indvar_flatten_reg_331;
reg   [31:0] j_0_reg_342;
reg   [6:0] k_0_reg_353;
wire   [63:0] zext_ln27_fu_445_p1;
wire   [63:0] zext_ln28_fu_462_p1;
wire  signed [63:0] sext_ln38_fu_609_p1;
wire   [63:0] zext_ln38_1_fu_632_p1;
wire  signed [63:0] sext_ln38_1_fu_655_p1;
wire   [63:0] zext_ln42_fu_704_p1;
wire   [63:0] empty_6_fu_405_p1;
wire   [63:0] empty_fu_415_p1;
wire   [63:0] empty_5_fu_424_p1;
wire    ap_block_pp3_stage0_01001;
wire   [37:0] tmp_fu_467_p3;
wire   [31:0] mul_ln31_fu_485_p0;
wire   [37:0] mul_ln31_fu_485_p1;
wire   [0:0] icmp_ln33_fu_508_p2;
wire   [30:0] i_fu_502_p2;
wire   [7:0] trunc_ln38_fu_529_p1;
wire   [0:0] icmp_ln35_fu_547_p2;
wire   [0:0] xor_ln31_fu_541_p2;
wire   [31:0] select_ln31_fu_513_p3;
wire   [0:0] and_ln31_fu_553_p2;
wire   [0:0] or_ln38_fu_565_p2;
wire   [31:0] j_fu_559_p2;
wire   [13:0] trunc_ln38_2_fu_583_p1;
wire   [13:0] trunc_ln38_1_fu_579_p1;
wire   [13:0] select_ln31_2_fu_587_p3;
wire   [13:0] zext_ln38_cast_fu_533_p3;
wire   [13:0] select_ln38_1_fu_595_p3;
wire   [13:0] add_ln38_1_fu_603_p2;
wire   [13:0] zext_ln38_fu_622_p1;
wire   [13:0] add_ln38_2_fu_626_p2;
wire   [12:0] tmp_3_fu_637_p3;
wire   [13:0] zext_ln38_2_fu_645_p1;
wire   [13:0] add_ln38_3_fu_649_p2;
wire   [38:0] add_ln33_fu_660_p2;
wire  signed [31:0] mul_ln38_fu_674_p0;
wire  signed [31:0] mul_ln38_fu_674_p1;
wire   [31:0] mul_ln38_fu_674_p2;
reg   [26:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [69:0] mul_ln31_fu_485_p00;
wire   [69:0] mul_ln31_fu_485_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

mmult_params_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_PARAMS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_PARAMS_DATA_WIDTH ))
mmult_params_s_axi_U(
    .AWVALID(s_axi_params_AWVALID),
    .AWREADY(s_axi_params_AWREADY),
    .AWADDR(s_axi_params_AWADDR),
    .WVALID(s_axi_params_WVALID),
    .WREADY(s_axi_params_WREADY),
    .WDATA(s_axi_params_WDATA),
    .WSTRB(s_axi_params_WSTRB),
    .ARVALID(s_axi_params_ARVALID),
    .ARREADY(s_axi_params_ARREADY),
    .ARADDR(s_axi_params_ARADDR),
    .RVALID(s_axi_params_RVALID),
    .RREADY(s_axi_params_RREADY),
    .RDATA(s_axi_params_RDATA),
    .RRESP(s_axi_params_RRESP),
    .BVALID(s_axi_params_BVALID),
    .BREADY(s_axi_params_BREADY),
    .BRESP(s_axi_params_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in1(in1),
    .in2(in2),
    .out_r(out_r),
    .dim(dim)
);

mmult_in1_mem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN1_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN1_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN1_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN1_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN1_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN1_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN1_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN1_MEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN1_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN1_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN1_MEM_CACHE_VALUE ))
mmult_in1_mem_m_axi_U(
    .AWVALID(m_axi_in1_mem_AWVALID),
    .AWREADY(m_axi_in1_mem_AWREADY),
    .AWADDR(m_axi_in1_mem_AWADDR),
    .AWID(m_axi_in1_mem_AWID),
    .AWLEN(m_axi_in1_mem_AWLEN),
    .AWSIZE(m_axi_in1_mem_AWSIZE),
    .AWBURST(m_axi_in1_mem_AWBURST),
    .AWLOCK(m_axi_in1_mem_AWLOCK),
    .AWCACHE(m_axi_in1_mem_AWCACHE),
    .AWPROT(m_axi_in1_mem_AWPROT),
    .AWQOS(m_axi_in1_mem_AWQOS),
    .AWREGION(m_axi_in1_mem_AWREGION),
    .AWUSER(m_axi_in1_mem_AWUSER),
    .WVALID(m_axi_in1_mem_WVALID),
    .WREADY(m_axi_in1_mem_WREADY),
    .WDATA(m_axi_in1_mem_WDATA),
    .WSTRB(m_axi_in1_mem_WSTRB),
    .WLAST(m_axi_in1_mem_WLAST),
    .WID(m_axi_in1_mem_WID),
    .WUSER(m_axi_in1_mem_WUSER),
    .ARVALID(m_axi_in1_mem_ARVALID),
    .ARREADY(m_axi_in1_mem_ARREADY),
    .ARADDR(m_axi_in1_mem_ARADDR),
    .ARID(m_axi_in1_mem_ARID),
    .ARLEN(m_axi_in1_mem_ARLEN),
    .ARSIZE(m_axi_in1_mem_ARSIZE),
    .ARBURST(m_axi_in1_mem_ARBURST),
    .ARLOCK(m_axi_in1_mem_ARLOCK),
    .ARCACHE(m_axi_in1_mem_ARCACHE),
    .ARPROT(m_axi_in1_mem_ARPROT),
    .ARQOS(m_axi_in1_mem_ARQOS),
    .ARREGION(m_axi_in1_mem_ARREGION),
    .ARUSER(m_axi_in1_mem_ARUSER),
    .RVALID(m_axi_in1_mem_RVALID),
    .RREADY(m_axi_in1_mem_RREADY),
    .RDATA(m_axi_in1_mem_RDATA),
    .RLAST(m_axi_in1_mem_RLAST),
    .RID(m_axi_in1_mem_RID),
    .RUSER(m_axi_in1_mem_RUSER),
    .RRESP(m_axi_in1_mem_RRESP),
    .BVALID(m_axi_in1_mem_BVALID),
    .BREADY(m_axi_in1_mem_BREADY),
    .BRESP(m_axi_in1_mem_BRESP),
    .BID(m_axi_in1_mem_BID),
    .BUSER(m_axi_in1_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(in1_mem_ARVALID),
    .I_ARREADY(in1_mem_ARREADY),
    .I_ARADDR(in1_mem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd4096),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(in1_mem_RVALID),
    .I_RREADY(in1_mem_RREADY),
    .I_RDATA(in1_mem_RDATA),
    .I_RID(in1_mem_RID),
    .I_RUSER(in1_mem_RUSER),
    .I_RRESP(in1_mem_RRESP),
    .I_RLAST(in1_mem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(in1_mem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(in1_mem_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(in1_mem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(in1_mem_BRESP),
    .I_BID(in1_mem_BID),
    .I_BUSER(in1_mem_BUSER)
);

mmult_in2_mem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN2_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN2_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN2_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN2_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN2_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN2_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN2_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN2_MEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN2_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN2_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN2_MEM_CACHE_VALUE ))
mmult_in2_mem_m_axi_U(
    .AWVALID(m_axi_in2_mem_AWVALID),
    .AWREADY(m_axi_in2_mem_AWREADY),
    .AWADDR(m_axi_in2_mem_AWADDR),
    .AWID(m_axi_in2_mem_AWID),
    .AWLEN(m_axi_in2_mem_AWLEN),
    .AWSIZE(m_axi_in2_mem_AWSIZE),
    .AWBURST(m_axi_in2_mem_AWBURST),
    .AWLOCK(m_axi_in2_mem_AWLOCK),
    .AWCACHE(m_axi_in2_mem_AWCACHE),
    .AWPROT(m_axi_in2_mem_AWPROT),
    .AWQOS(m_axi_in2_mem_AWQOS),
    .AWREGION(m_axi_in2_mem_AWREGION),
    .AWUSER(m_axi_in2_mem_AWUSER),
    .WVALID(m_axi_in2_mem_WVALID),
    .WREADY(m_axi_in2_mem_WREADY),
    .WDATA(m_axi_in2_mem_WDATA),
    .WSTRB(m_axi_in2_mem_WSTRB),
    .WLAST(m_axi_in2_mem_WLAST),
    .WID(m_axi_in2_mem_WID),
    .WUSER(m_axi_in2_mem_WUSER),
    .ARVALID(m_axi_in2_mem_ARVALID),
    .ARREADY(m_axi_in2_mem_ARREADY),
    .ARADDR(m_axi_in2_mem_ARADDR),
    .ARID(m_axi_in2_mem_ARID),
    .ARLEN(m_axi_in2_mem_ARLEN),
    .ARSIZE(m_axi_in2_mem_ARSIZE),
    .ARBURST(m_axi_in2_mem_ARBURST),
    .ARLOCK(m_axi_in2_mem_ARLOCK),
    .ARCACHE(m_axi_in2_mem_ARCACHE),
    .ARPROT(m_axi_in2_mem_ARPROT),
    .ARQOS(m_axi_in2_mem_ARQOS),
    .ARREGION(m_axi_in2_mem_ARREGION),
    .ARUSER(m_axi_in2_mem_ARUSER),
    .RVALID(m_axi_in2_mem_RVALID),
    .RREADY(m_axi_in2_mem_RREADY),
    .RDATA(m_axi_in2_mem_RDATA),
    .RLAST(m_axi_in2_mem_RLAST),
    .RID(m_axi_in2_mem_RID),
    .RUSER(m_axi_in2_mem_RUSER),
    .RRESP(m_axi_in2_mem_RRESP),
    .BVALID(m_axi_in2_mem_BVALID),
    .BREADY(m_axi_in2_mem_BREADY),
    .BRESP(m_axi_in2_mem_BRESP),
    .BID(m_axi_in2_mem_BID),
    .BUSER(m_axi_in2_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(in2_mem_ARVALID),
    .I_ARREADY(in2_mem_ARREADY),
    .I_ARADDR(in2_mem_addr_reg_742),
    .I_ARID(1'd0),
    .I_ARLEN(32'd4096),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(in2_mem_RVALID),
    .I_RREADY(in2_mem_RREADY),
    .I_RDATA(in2_mem_RDATA),
    .I_RID(in2_mem_RID),
    .I_RUSER(in2_mem_RUSER),
    .I_RRESP(in2_mem_RRESP),
    .I_RLAST(in2_mem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(in2_mem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(in2_mem_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(in2_mem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(in2_mem_BRESP),
    .I_BID(in2_mem_BID),
    .I_BUSER(in2_mem_BUSER)
);

mmult_out_mem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_MEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUT_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_MEM_CACHE_VALUE ))
mmult_out_mem_m_axi_U(
    .AWVALID(m_axi_out_mem_AWVALID),
    .AWREADY(m_axi_out_mem_AWREADY),
    .AWADDR(m_axi_out_mem_AWADDR),
    .AWID(m_axi_out_mem_AWID),
    .AWLEN(m_axi_out_mem_AWLEN),
    .AWSIZE(m_axi_out_mem_AWSIZE),
    .AWBURST(m_axi_out_mem_AWBURST),
    .AWLOCK(m_axi_out_mem_AWLOCK),
    .AWCACHE(m_axi_out_mem_AWCACHE),
    .AWPROT(m_axi_out_mem_AWPROT),
    .AWQOS(m_axi_out_mem_AWQOS),
    .AWREGION(m_axi_out_mem_AWREGION),
    .AWUSER(m_axi_out_mem_AWUSER),
    .WVALID(m_axi_out_mem_WVALID),
    .WREADY(m_axi_out_mem_WREADY),
    .WDATA(m_axi_out_mem_WDATA),
    .WSTRB(m_axi_out_mem_WSTRB),
    .WLAST(m_axi_out_mem_WLAST),
    .WID(m_axi_out_mem_WID),
    .WUSER(m_axi_out_mem_WUSER),
    .ARVALID(m_axi_out_mem_ARVALID),
    .ARREADY(m_axi_out_mem_ARREADY),
    .ARADDR(m_axi_out_mem_ARADDR),
    .ARID(m_axi_out_mem_ARID),
    .ARLEN(m_axi_out_mem_ARLEN),
    .ARSIZE(m_axi_out_mem_ARSIZE),
    .ARBURST(m_axi_out_mem_ARBURST),
    .ARLOCK(m_axi_out_mem_ARLOCK),
    .ARCACHE(m_axi_out_mem_ARCACHE),
    .ARPROT(m_axi_out_mem_ARPROT),
    .ARQOS(m_axi_out_mem_ARQOS),
    .ARREGION(m_axi_out_mem_ARREGION),
    .ARUSER(m_axi_out_mem_ARUSER),
    .RVALID(m_axi_out_mem_RVALID),
    .RREADY(m_axi_out_mem_RREADY),
    .RDATA(m_axi_out_mem_RDATA),
    .RLAST(m_axi_out_mem_RLAST),
    .RID(m_axi_out_mem_RID),
    .RUSER(m_axi_out_mem_RUSER),
    .RRESP(m_axi_out_mem_RRESP),
    .BVALID(m_axi_out_mem_BVALID),
    .BREADY(m_axi_out_mem_BREADY),
    .BRESP(m_axi_out_mem_BRESP),
    .BID(m_axi_out_mem_BID),
    .BUSER(m_axi_out_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(out_mem_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(out_mem_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(out_mem_RDATA),
    .I_RID(out_mem_RID),
    .I_RUSER(out_mem_RUSER),
    .I_RRESP(out_mem_RRESP),
    .I_RLAST(out_mem_RLAST),
    .I_AWVALID(out_mem_AWVALID),
    .I_AWREADY(out_mem_AWREADY),
    .I_AWADDR(out_mem_addr_reg_736),
    .I_AWID(1'd0),
    .I_AWLEN(32'd4096),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(out_mem_WVALID),
    .I_WREADY(out_mem_WREADY),
    .I_WDATA(out_loc_load_reg_848),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(out_mem_BVALID),
    .I_BREADY(out_mem_BREADY),
    .I_BRESP(out_mem_BRESP),
    .I_BID(out_mem_BID),
    .I_BUSER(out_mem_BUSER)
);

mmult_in1_loc #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
in1_loc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in1_loc_address0),
    .ce0(in1_loc_ce0),
    .we0(in1_loc_we0),
    .d0(in1_mem_addr_read_reg_757),
    .q0(in1_loc_q0)
);

mmult_in1_loc #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
in2_loc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in2_loc_address0),
    .ce0(in2_loc_ce0),
    .we0(in2_loc_we0),
    .d0(in2_mem_addr_read_reg_771),
    .q0(in2_loc_q0)
);

mmult_in1_loc #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
out_loc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_loc_address0),
    .ce0(out_loc_ce0),
    .we0(out_loc_we0),
    .d0(out_loc_d0),
    .q0(out_loc_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((out_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state26)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((out_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_0_reg_320 <= select_ln31_1_reg_794;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_0_reg_320 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_flatten15_reg_309 <= add_ln31_reg_789;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        indvar_flatten15_reg_309 <= 70'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_flatten_reg_331 <= select_ln33_1_reg_824;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        indvar_flatten_reg_331 <= 39'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        j_0_reg_342 <= select_ln33_reg_809;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        j_0_reg_342 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        k_0_reg_353 <= k_fu_687_p2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        k_0_reg_353 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln27_reg_285 <= add_ln27_reg_752;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_ln27_reg_285 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        phi_ln28_reg_297 <= 13'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln28_reg_762 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        phi_ln28_reg_297 <= add_ln28_reg_766;
    end
end

always @ (posedge ap_clk) begin
    if (((out_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        phi_ln42_reg_364 <= 13'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln42_fu_692_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        phi_ln42_reg_364 <= add_ln42_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln27_reg_752 <= add_ln27_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln28_reg_766 <= add_ln28_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln31_reg_789 <= add_ln31_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dim_read_reg_709 <= dim;
        in3_reg_725 <= {{in1[31:2]}};
        in_reg_720 <= {{in2[31:2]}};
        out5_reg_715 <= {{out_r[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln27_reg_748 <= icmp_ln27_fu_433_p2;
        icmp_ln27_reg_748_pp0_iter1_reg <= icmp_ln27_reg_748;
        phi_ln27_reg_285_pp0_iter1_reg <= phi_ln27_reg_285;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln28_reg_762 <= icmp_ln28_fu_450_p2;
        icmp_ln28_reg_762_pp1_iter1_reg <= icmp_ln28_reg_762;
        phi_ln28_reg_297_pp1_iter1_reg <= phi_ln28_reg_297;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln42_reg_834 <= icmp_ln42_fu_692_p2;
        icmp_ln42_reg_834_pp3_iter1_reg <= icmp_ln42_reg_834;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_748 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_mem_addr_read_reg_757 <= in1_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln28_reg_762 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in2_mem_addr_read_reg_771 <= in2_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in2_mem_addr_reg_742[29 : 0] <= empty_5_fu_424_p1[29 : 0];
        out_mem_addr_reg_736[29 : 0] <= empty_fu_415_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        mul_ln31_reg_781[69 : 6] <= mul_ln31_fu_485_p2[69 : 6];
        zext_ln31_reg_776[37 : 6] <= zext_ln31_fu_474_p1[37 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_491_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        out_loc_addr_reg_804 <= sext_ln38_fu_609_p1;
        select_ln31_1_reg_794 <= select_ln31_1_fu_521_p3;
        select_ln33_1_reg_824 <= select_ln33_1_fu_666_p3;
        select_ln33_reg_809 <= select_ln33_fu_614_p3;
        select_ln38_reg_799 <= select_ln38_fu_571_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln42_reg_834 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        out_loc_load_reg_848 <= out_loc_q0;
    end
end

always @ (*) begin
    if ((icmp_ln27_fu_433_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln28_fu_450_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_692_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if (((out_mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_748 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_phi_ln27_phi_fu_289_p4 = add_ln27_reg_752;
    end else begin
        ap_phi_mux_phi_ln27_phi_fu_289_p4 = phi_ln27_reg_285;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln28_reg_762 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_phi_ln28_phi_fu_301_p4 = add_ln28_reg_766;
    end else begin
        ap_phi_mux_phi_ln28_phi_fu_301_p4 = phi_ln28_reg_297;
    end
end

always @ (*) begin
    if (((out_mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        in1_loc_address0 = zext_ln38_1_fu_632_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in1_loc_address0 = zext_ln27_fu_445_p1;
    end else begin
        in1_loc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        in1_loc_ce0 = 1'b1;
    end else begin
        in1_loc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_748_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in1_loc_we0 = 1'b1;
    end else begin
        in1_loc_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((in1_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        in1_mem_ARVALID = 1'b1;
    end else begin
        in1_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_mem_RREADY = 1'b1;
    end else begin
        in1_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in1_mem_blk_n_AR = m_axi_in1_mem_ARREADY;
    end else begin
        in1_mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_748 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_mem_blk_n_R = m_axi_in1_mem_RVALID;
    end else begin
        in1_mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        in2_loc_address0 = sext_ln38_1_fu_655_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        in2_loc_address0 = zext_ln28_fu_462_p1;
    end else begin
        in2_loc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        in2_loc_ce0 = 1'b1;
    end else begin
        in2_loc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln28_reg_762_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        in2_loc_we0 = 1'b1;
    end else begin
        in2_loc_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((in2_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        in2_mem_ARVALID = 1'b1;
    end else begin
        in2_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln28_reg_762 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in2_mem_RREADY = 1'b1;
    end else begin
        in2_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        in2_mem_blk_n_AR = m_axi_in2_mem_ARREADY;
    end else begin
        in2_mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln28_reg_762 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in2_mem_blk_n_R = m_axi_in2_mem_RVALID;
    end else begin
        in2_mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        out_loc_address0 = zext_ln42_fu_704_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        out_loc_address0 = out_loc_addr_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        out_loc_address0 = sext_ln38_fu_609_p1;
    end else begin
        out_loc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        out_loc_ce0 = 1'b1;
    end else begin
        out_loc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        out_loc_we0 = 1'b1;
    end else begin
        out_loc_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((out_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        out_mem_AWVALID = 1'b1;
    end else begin
        out_mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((out_mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        out_mem_BREADY = 1'b1;
    end else begin
        out_mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln42_reg_834_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        out_mem_WVALID = 1'b1;
    end else begin
        out_mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        out_mem_blk_n_AW = m_axi_out_mem_AWREADY;
    end else begin
        out_mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        out_mem_blk_n_B = m_axi_out_mem_BVALID;
    end else begin
        out_mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (icmp_ln42_reg_834_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        out_mem_blk_n_W = m_axi_out_mem_WREADY;
    end else begin
        out_mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((in1_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln27_fu_433_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln27_fu_433_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((in2_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln28_fu_450_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln28_fu_450_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln31_fu_491_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state25 : begin
            if (((out_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln42_fu_692_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln42_fu_692_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((out_mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_fu_439_p2 = (ap_phi_mux_phi_ln27_phi_fu_289_p4 + 13'd1);

assign add_ln28_fu_456_p2 = (ap_phi_mux_phi_ln28_phi_fu_301_p4 + 13'd1);

assign add_ln31_fu_496_p2 = (indvar_flatten15_reg_309 + 70'd1);

assign add_ln33_fu_660_p2 = (39'd1 + indvar_flatten_reg_331);

assign add_ln38_1_fu_603_p2 = (zext_ln38_cast_fu_533_p3 + select_ln38_1_fu_595_p3);

assign add_ln38_2_fu_626_p2 = (zext_ln38_cast_fu_533_p3 + zext_ln38_fu_622_p1);

assign add_ln38_3_fu_649_p2 = (zext_ln38_2_fu_645_p1 + select_ln38_1_fu_595_p3);

assign add_ln42_fu_698_p2 = (phi_ln42_reg_364 + 13'd1);

assign and_ln31_fu_553_p2 = (xor_ln31_fu_541_p2 & icmp_ln35_fu_547_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((in1_mem_RVALID == 1'b0) & (icmp_ln27_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((in1_mem_RVALID == 1'b0) & (icmp_ln27_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((in2_mem_RVALID == 1'b0) & (icmp_ln28_reg_762 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((in2_mem_RVALID == 1'b0) & (icmp_ln28_reg_762 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((in1_mem_RVALID == 1'b0) & (icmp_ln27_reg_748 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = ((in2_mem_RVALID == 1'b0) & (icmp_ln28_reg_762 == 1'd0));
end

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((out_mem_WREADY == 1'b0) & (icmp_ln42_reg_834_pp3_iter1_reg == 1'd0));
end

assign ap_block_state28_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_5_fu_424_p1 = in_reg_720;

assign empty_6_fu_405_p1 = in3_reg_725;

assign empty_fu_415_p1 = out5_reg_715;

assign i_fu_502_p2 = (31'd1 + i_0_reg_320);

assign icmp_ln27_fu_433_p2 = ((ap_phi_mux_phi_ln27_phi_fu_289_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_450_p2 = ((ap_phi_mux_phi_ln28_phi_fu_301_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_491_p2 = ((indvar_flatten15_reg_309 == mul_ln31_reg_781) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_508_p2 = ((indvar_flatten_reg_331 == zext_ln31_reg_776) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_547_p2 = ((k_0_reg_353 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_692_p2 = ((phi_ln42_reg_364 == 13'd4096) ? 1'b1 : 1'b0);

assign in1_mem_ARADDR = empty_6_fu_405_p1;

assign j_fu_559_p2 = (32'd1 + select_ln31_fu_513_p3);

assign k_fu_687_p2 = (7'd1 + select_ln38_reg_799);

assign mul_ln31_fu_485_p0 = mul_ln31_fu_485_p00;

assign mul_ln31_fu_485_p00 = dim_read_reg_709;

assign mul_ln31_fu_485_p1 = mul_ln31_fu_485_p10;

assign mul_ln31_fu_485_p10 = tmp_fu_467_p3;

assign mul_ln31_fu_485_p2 = (mul_ln31_fu_485_p0 * mul_ln31_fu_485_p1);

assign mul_ln38_fu_674_p0 = in2_loc_q0;

assign mul_ln38_fu_674_p1 = in1_loc_q0;

assign mul_ln38_fu_674_p2 = ($signed(mul_ln38_fu_674_p0) * $signed(mul_ln38_fu_674_p1));

assign or_ln38_fu_565_p2 = (icmp_ln33_fu_508_p2 | and_ln31_fu_553_p2);

assign out_loc_d0 = (mul_ln38_fu_674_p2 + out_loc_q0);

assign select_ln31_1_fu_521_p3 = ((icmp_ln33_fu_508_p2[0:0] === 1'b1) ? i_fu_502_p2 : i_0_reg_320);

assign select_ln31_2_fu_587_p3 = ((icmp_ln33_fu_508_p2[0:0] === 1'b1) ? 14'd0 : trunc_ln38_2_fu_583_p1);

assign select_ln31_fu_513_p3 = ((icmp_ln33_fu_508_p2[0:0] === 1'b1) ? 32'd0 : j_0_reg_342);

assign select_ln33_1_fu_666_p3 = ((icmp_ln33_fu_508_p2[0:0] === 1'b1) ? 39'd1 : add_ln33_fu_660_p2);

assign select_ln33_fu_614_p3 = ((and_ln31_fu_553_p2[0:0] === 1'b1) ? j_fu_559_p2 : select_ln31_fu_513_p3);

assign select_ln38_1_fu_595_p3 = ((and_ln31_fu_553_p2[0:0] === 1'b1) ? trunc_ln38_1_fu_579_p1 : select_ln31_2_fu_587_p3);

assign select_ln38_fu_571_p3 = ((or_ln38_fu_565_p2[0:0] === 1'b1) ? 7'd0 : k_0_reg_353);

assign sext_ln38_1_fu_655_p1 = $signed(add_ln38_3_fu_649_p2);

assign sext_ln38_fu_609_p1 = $signed(add_ln38_1_fu_603_p2);

assign tmp_3_fu_637_p3 = {{select_ln38_fu_571_p3}, {6'd0}};

assign tmp_fu_467_p3 = {{dim_read_reg_709}, {6'd0}};

assign trunc_ln38_1_fu_579_p1 = j_fu_559_p2[13:0];

assign trunc_ln38_2_fu_583_p1 = j_0_reg_342[13:0];

assign trunc_ln38_fu_529_p1 = select_ln31_1_fu_521_p3[7:0];

assign xor_ln31_fu_541_p2 = (icmp_ln33_fu_508_p2 ^ 1'd1);

assign zext_ln27_fu_445_p1 = phi_ln27_reg_285_pp0_iter1_reg;

assign zext_ln28_fu_462_p1 = phi_ln28_reg_297_pp1_iter1_reg;

assign zext_ln31_fu_474_p1 = tmp_fu_467_p3;

assign zext_ln38_1_fu_632_p1 = add_ln38_2_fu_626_p2;

assign zext_ln38_2_fu_645_p1 = tmp_3_fu_637_p3;

assign zext_ln38_cast_fu_533_p3 = {{trunc_ln38_fu_529_p1}, {6'd0}};

assign zext_ln38_fu_622_p1 = select_ln38_fu_571_p3;

assign zext_ln42_fu_704_p1 = phi_ln42_reg_364;

always @ (posedge ap_clk) begin
    out_mem_addr_reg_736[31:30] <= 2'b00;
    in2_mem_addr_reg_742[31:30] <= 2'b00;
    zext_ln31_reg_776[5:0] <= 6'b000000;
    zext_ln31_reg_776[38] <= 1'b0;
    mul_ln31_reg_781[5:0] <= 6'b000000;
end

endmodule //mmult

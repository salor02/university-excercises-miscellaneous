// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=4227201,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=3,HLS_SYN_FF=2413,HLS_SYN_LUT=2800,HLS_VERSION=2020_1}" *)

module mmult (
        ap_clk,
        ap_rst_n,
        m_axi_in1_mem_AWVALID,
        m_axi_in1_mem_AWREADY,
        m_axi_in1_mem_AWADDR,
        m_axi_in1_mem_AWID,
        m_axi_in1_mem_AWLEN,
        m_axi_in1_mem_AWSIZE,
        m_axi_in1_mem_AWBURST,
        m_axi_in1_mem_AWLOCK,
        m_axi_in1_mem_AWCACHE,
        m_axi_in1_mem_AWPROT,
        m_axi_in1_mem_AWQOS,
        m_axi_in1_mem_AWREGION,
        m_axi_in1_mem_AWUSER,
        m_axi_in1_mem_WVALID,
        m_axi_in1_mem_WREADY,
        m_axi_in1_mem_WDATA,
        m_axi_in1_mem_WSTRB,
        m_axi_in1_mem_WLAST,
        m_axi_in1_mem_WID,
        m_axi_in1_mem_WUSER,
        m_axi_in1_mem_ARVALID,
        m_axi_in1_mem_ARREADY,
        m_axi_in1_mem_ARADDR,
        m_axi_in1_mem_ARID,
        m_axi_in1_mem_ARLEN,
        m_axi_in1_mem_ARSIZE,
        m_axi_in1_mem_ARBURST,
        m_axi_in1_mem_ARLOCK,
        m_axi_in1_mem_ARCACHE,
        m_axi_in1_mem_ARPROT,
        m_axi_in1_mem_ARQOS,
        m_axi_in1_mem_ARREGION,
        m_axi_in1_mem_ARUSER,
        m_axi_in1_mem_RVALID,
        m_axi_in1_mem_RREADY,
        m_axi_in1_mem_RDATA,
        m_axi_in1_mem_RLAST,
        m_axi_in1_mem_RID,
        m_axi_in1_mem_RUSER,
        m_axi_in1_mem_RRESP,
        m_axi_in1_mem_BVALID,
        m_axi_in1_mem_BREADY,
        m_axi_in1_mem_BRESP,
        m_axi_in1_mem_BID,
        m_axi_in1_mem_BUSER,
        m_axi_in2_mem_AWVALID,
        m_axi_in2_mem_AWREADY,
        m_axi_in2_mem_AWADDR,
        m_axi_in2_mem_AWID,
        m_axi_in2_mem_AWLEN,
        m_axi_in2_mem_AWSIZE,
        m_axi_in2_mem_AWBURST,
        m_axi_in2_mem_AWLOCK,
        m_axi_in2_mem_AWCACHE,
        m_axi_in2_mem_AWPROT,
        m_axi_in2_mem_AWQOS,
        m_axi_in2_mem_AWREGION,
        m_axi_in2_mem_AWUSER,
        m_axi_in2_mem_WVALID,
        m_axi_in2_mem_WREADY,
        m_axi_in2_mem_WDATA,
        m_axi_in2_mem_WSTRB,
        m_axi_in2_mem_WLAST,
        m_axi_in2_mem_WID,
        m_axi_in2_mem_WUSER,
        m_axi_in2_mem_ARVALID,
        m_axi_in2_mem_ARREADY,
        m_axi_in2_mem_ARADDR,
        m_axi_in2_mem_ARID,
        m_axi_in2_mem_ARLEN,
        m_axi_in2_mem_ARSIZE,
        m_axi_in2_mem_ARBURST,
        m_axi_in2_mem_ARLOCK,
        m_axi_in2_mem_ARCACHE,
        m_axi_in2_mem_ARPROT,
        m_axi_in2_mem_ARQOS,
        m_axi_in2_mem_ARREGION,
        m_axi_in2_mem_ARUSER,
        m_axi_in2_mem_RVALID,
        m_axi_in2_mem_RREADY,
        m_axi_in2_mem_RDATA,
        m_axi_in2_mem_RLAST,
        m_axi_in2_mem_RID,
        m_axi_in2_mem_RUSER,
        m_axi_in2_mem_RRESP,
        m_axi_in2_mem_BVALID,
        m_axi_in2_mem_BREADY,
        m_axi_in2_mem_BRESP,
        m_axi_in2_mem_BID,
        m_axi_in2_mem_BUSER,
        m_axi_out_mem_AWVALID,
        m_axi_out_mem_AWREADY,
        m_axi_out_mem_AWADDR,
        m_axi_out_mem_AWID,
        m_axi_out_mem_AWLEN,
        m_axi_out_mem_AWSIZE,
        m_axi_out_mem_AWBURST,
        m_axi_out_mem_AWLOCK,
        m_axi_out_mem_AWCACHE,
        m_axi_out_mem_AWPROT,
        m_axi_out_mem_AWQOS,
        m_axi_out_mem_AWREGION,
        m_axi_out_mem_AWUSER,
        m_axi_out_mem_WVALID,
        m_axi_out_mem_WREADY,
        m_axi_out_mem_WDATA,
        m_axi_out_mem_WSTRB,
        m_axi_out_mem_WLAST,
        m_axi_out_mem_WID,
        m_axi_out_mem_WUSER,
        m_axi_out_mem_ARVALID,
        m_axi_out_mem_ARREADY,
        m_axi_out_mem_ARADDR,
        m_axi_out_mem_ARID,
        m_axi_out_mem_ARLEN,
        m_axi_out_mem_ARSIZE,
        m_axi_out_mem_ARBURST,
        m_axi_out_mem_ARLOCK,
        m_axi_out_mem_ARCACHE,
        m_axi_out_mem_ARPROT,
        m_axi_out_mem_ARQOS,
        m_axi_out_mem_ARREGION,
        m_axi_out_mem_ARUSER,
        m_axi_out_mem_RVALID,
        m_axi_out_mem_RREADY,
        m_axi_out_mem_RDATA,
        m_axi_out_mem_RLAST,
        m_axi_out_mem_RID,
        m_axi_out_mem_RUSER,
        m_axi_out_mem_RRESP,
        m_axi_out_mem_BVALID,
        m_axi_out_mem_BREADY,
        m_axi_out_mem_BRESP,
        m_axi_out_mem_BID,
        m_axi_out_mem_BUSER,
        s_axi_params_AWVALID,
        s_axi_params_AWREADY,
        s_axi_params_AWADDR,
        s_axi_params_WVALID,
        s_axi_params_WREADY,
        s_axi_params_WDATA,
        s_axi_params_WSTRB,
        s_axi_params_ARVALID,
        s_axi_params_ARREADY,
        s_axi_params_ARADDR,
        s_axi_params_RVALID,
        s_axi_params_RREADY,
        s_axi_params_RDATA,
        s_axi_params_RRESP,
        s_axi_params_BVALID,
        s_axi_params_BREADY,
        s_axi_params_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;
parameter    C_S_AXI_PARAMS_DATA_WIDTH = 32;
parameter    C_S_AXI_PARAMS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN1_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN1_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_IN1_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_USER_VALUE = 0;
parameter    C_M_AXI_IN1_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_IN1_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN2_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN2_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_IN2_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_USER_VALUE = 0;
parameter    C_M_AXI_IN2_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_IN2_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_OUT_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_USER_VALUE = 0;
parameter    C_M_AXI_OUT_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_MEM_CACHE_VALUE = 3;

parameter C_S_AXI_PARAMS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN1_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN2_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_MEM_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_in1_mem_AWVALID;
input   m_axi_in1_mem_AWREADY;
output  [C_M_AXI_IN1_MEM_ADDR_WIDTH - 1:0] m_axi_in1_mem_AWADDR;
output  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_AWID;
output  [7:0] m_axi_in1_mem_AWLEN;
output  [2:0] m_axi_in1_mem_AWSIZE;
output  [1:0] m_axi_in1_mem_AWBURST;
output  [1:0] m_axi_in1_mem_AWLOCK;
output  [3:0] m_axi_in1_mem_AWCACHE;
output  [2:0] m_axi_in1_mem_AWPROT;
output  [3:0] m_axi_in1_mem_AWQOS;
output  [3:0] m_axi_in1_mem_AWREGION;
output  [C_M_AXI_IN1_MEM_AWUSER_WIDTH - 1:0] m_axi_in1_mem_AWUSER;
output   m_axi_in1_mem_WVALID;
input   m_axi_in1_mem_WREADY;
output  [C_M_AXI_IN1_MEM_DATA_WIDTH - 1:0] m_axi_in1_mem_WDATA;
output  [C_M_AXI_IN1_MEM_WSTRB_WIDTH - 1:0] m_axi_in1_mem_WSTRB;
output   m_axi_in1_mem_WLAST;
output  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_WID;
output  [C_M_AXI_IN1_MEM_WUSER_WIDTH - 1:0] m_axi_in1_mem_WUSER;
output   m_axi_in1_mem_ARVALID;
input   m_axi_in1_mem_ARREADY;
output  [C_M_AXI_IN1_MEM_ADDR_WIDTH - 1:0] m_axi_in1_mem_ARADDR;
output  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_ARID;
output  [7:0] m_axi_in1_mem_ARLEN;
output  [2:0] m_axi_in1_mem_ARSIZE;
output  [1:0] m_axi_in1_mem_ARBURST;
output  [1:0] m_axi_in1_mem_ARLOCK;
output  [3:0] m_axi_in1_mem_ARCACHE;
output  [2:0] m_axi_in1_mem_ARPROT;
output  [3:0] m_axi_in1_mem_ARQOS;
output  [3:0] m_axi_in1_mem_ARREGION;
output  [C_M_AXI_IN1_MEM_ARUSER_WIDTH - 1:0] m_axi_in1_mem_ARUSER;
input   m_axi_in1_mem_RVALID;
output   m_axi_in1_mem_RREADY;
input  [C_M_AXI_IN1_MEM_DATA_WIDTH - 1:0] m_axi_in1_mem_RDATA;
input   m_axi_in1_mem_RLAST;
input  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_RID;
input  [C_M_AXI_IN1_MEM_RUSER_WIDTH - 1:0] m_axi_in1_mem_RUSER;
input  [1:0] m_axi_in1_mem_RRESP;
input   m_axi_in1_mem_BVALID;
output   m_axi_in1_mem_BREADY;
input  [1:0] m_axi_in1_mem_BRESP;
input  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_BID;
input  [C_M_AXI_IN1_MEM_BUSER_WIDTH - 1:0] m_axi_in1_mem_BUSER;
output   m_axi_in2_mem_AWVALID;
input   m_axi_in2_mem_AWREADY;
output  [C_M_AXI_IN2_MEM_ADDR_WIDTH - 1:0] m_axi_in2_mem_AWADDR;
output  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_AWID;
output  [7:0] m_axi_in2_mem_AWLEN;
output  [2:0] m_axi_in2_mem_AWSIZE;
output  [1:0] m_axi_in2_mem_AWBURST;
output  [1:0] m_axi_in2_mem_AWLOCK;
output  [3:0] m_axi_in2_mem_AWCACHE;
output  [2:0] m_axi_in2_mem_AWPROT;
output  [3:0] m_axi_in2_mem_AWQOS;
output  [3:0] m_axi_in2_mem_AWREGION;
output  [C_M_AXI_IN2_MEM_AWUSER_WIDTH - 1:0] m_axi_in2_mem_AWUSER;
output   m_axi_in2_mem_WVALID;
input   m_axi_in2_mem_WREADY;
output  [C_M_AXI_IN2_MEM_DATA_WIDTH - 1:0] m_axi_in2_mem_WDATA;
output  [C_M_AXI_IN2_MEM_WSTRB_WIDTH - 1:0] m_axi_in2_mem_WSTRB;
output   m_axi_in2_mem_WLAST;
output  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_WID;
output  [C_M_AXI_IN2_MEM_WUSER_WIDTH - 1:0] m_axi_in2_mem_WUSER;
output   m_axi_in2_mem_ARVALID;
input   m_axi_in2_mem_ARREADY;
output  [C_M_AXI_IN2_MEM_ADDR_WIDTH - 1:0] m_axi_in2_mem_ARADDR;
output  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_ARID;
output  [7:0] m_axi_in2_mem_ARLEN;
output  [2:0] m_axi_in2_mem_ARSIZE;
output  [1:0] m_axi_in2_mem_ARBURST;
output  [1:0] m_axi_in2_mem_ARLOCK;
output  [3:0] m_axi_in2_mem_ARCACHE;
output  [2:0] m_axi_in2_mem_ARPROT;
output  [3:0] m_axi_in2_mem_ARQOS;
output  [3:0] m_axi_in2_mem_ARREGION;
output  [C_M_AXI_IN2_MEM_ARUSER_WIDTH - 1:0] m_axi_in2_mem_ARUSER;
input   m_axi_in2_mem_RVALID;
output   m_axi_in2_mem_RREADY;
input  [C_M_AXI_IN2_MEM_DATA_WIDTH - 1:0] m_axi_in2_mem_RDATA;
input   m_axi_in2_mem_RLAST;
input  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_RID;
input  [C_M_AXI_IN2_MEM_RUSER_WIDTH - 1:0] m_axi_in2_mem_RUSER;
input  [1:0] m_axi_in2_mem_RRESP;
input   m_axi_in2_mem_BVALID;
output   m_axi_in2_mem_BREADY;
input  [1:0] m_axi_in2_mem_BRESP;
input  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_BID;
input  [C_M_AXI_IN2_MEM_BUSER_WIDTH - 1:0] m_axi_in2_mem_BUSER;
output   m_axi_out_mem_AWVALID;
input   m_axi_out_mem_AWREADY;
output  [C_M_AXI_OUT_MEM_ADDR_WIDTH - 1:0] m_axi_out_mem_AWADDR;
output  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_AWID;
output  [7:0] m_axi_out_mem_AWLEN;
output  [2:0] m_axi_out_mem_AWSIZE;
output  [1:0] m_axi_out_mem_AWBURST;
output  [1:0] m_axi_out_mem_AWLOCK;
output  [3:0] m_axi_out_mem_AWCACHE;
output  [2:0] m_axi_out_mem_AWPROT;
output  [3:0] m_axi_out_mem_AWQOS;
output  [3:0] m_axi_out_mem_AWREGION;
output  [C_M_AXI_OUT_MEM_AWUSER_WIDTH - 1:0] m_axi_out_mem_AWUSER;
output   m_axi_out_mem_WVALID;
input   m_axi_out_mem_WREADY;
output  [C_M_AXI_OUT_MEM_DATA_WIDTH - 1:0] m_axi_out_mem_WDATA;
output  [C_M_AXI_OUT_MEM_WSTRB_WIDTH - 1:0] m_axi_out_mem_WSTRB;
output   m_axi_out_mem_WLAST;
output  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_WID;
output  [C_M_AXI_OUT_MEM_WUSER_WIDTH - 1:0] m_axi_out_mem_WUSER;
output   m_axi_out_mem_ARVALID;
input   m_axi_out_mem_ARREADY;
output  [C_M_AXI_OUT_MEM_ADDR_WIDTH - 1:0] m_axi_out_mem_ARADDR;
output  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_ARID;
output  [7:0] m_axi_out_mem_ARLEN;
output  [2:0] m_axi_out_mem_ARSIZE;
output  [1:0] m_axi_out_mem_ARBURST;
output  [1:0] m_axi_out_mem_ARLOCK;
output  [3:0] m_axi_out_mem_ARCACHE;
output  [2:0] m_axi_out_mem_ARPROT;
output  [3:0] m_axi_out_mem_ARQOS;
output  [3:0] m_axi_out_mem_ARREGION;
output  [C_M_AXI_OUT_MEM_ARUSER_WIDTH - 1:0] m_axi_out_mem_ARUSER;
input   m_axi_out_mem_RVALID;
output   m_axi_out_mem_RREADY;
input  [C_M_AXI_OUT_MEM_DATA_WIDTH - 1:0] m_axi_out_mem_RDATA;
input   m_axi_out_mem_RLAST;
input  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_RID;
input  [C_M_AXI_OUT_MEM_RUSER_WIDTH - 1:0] m_axi_out_mem_RUSER;
input  [1:0] m_axi_out_mem_RRESP;
input   m_axi_out_mem_BVALID;
output   m_axi_out_mem_BREADY;
input  [1:0] m_axi_out_mem_BRESP;
input  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_BID;
input  [C_M_AXI_OUT_MEM_BUSER_WIDTH - 1:0] m_axi_out_mem_BUSER;
input   s_axi_params_AWVALID;
output   s_axi_params_AWREADY;
input  [C_S_AXI_PARAMS_ADDR_WIDTH - 1:0] s_axi_params_AWADDR;
input   s_axi_params_WVALID;
output   s_axi_params_WREADY;
input  [C_S_AXI_PARAMS_DATA_WIDTH - 1:0] s_axi_params_WDATA;
input  [C_S_AXI_PARAMS_WSTRB_WIDTH - 1:0] s_axi_params_WSTRB;
input   s_axi_params_ARVALID;
output   s_axi_params_ARREADY;
input  [C_S_AXI_PARAMS_ADDR_WIDTH - 1:0] s_axi_params_ARADDR;
output   s_axi_params_RVALID;
input   s_axi_params_RREADY;
output  [C_S_AXI_PARAMS_DATA_WIDTH - 1:0] s_axi_params_RDATA;
output  [1:0] s_axi_params_RRESP;
output   s_axi_params_BVALID;
input   s_axi_params_BREADY;
output  [1:0] s_axi_params_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in1;
wire   [31:0] in2;
wire   [31:0] out_r;
wire   [31:0] dim;
reg    in1_mem_blk_n_AR;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln20_fu_301_p2;
reg    in1_mem_blk_n_R;
wire    ap_CS_fsm_state18;
reg    in2_mem_blk_n_AR;
wire    ap_CS_fsm_state11;
reg    in2_mem_blk_n_R;
reg    out_mem_blk_n_AR;
reg    out_mem_blk_n_R;
reg    out_mem_blk_n_AW;
wire    ap_CS_fsm_state19;
reg    out_mem_blk_n_W;
wire    ap_CS_fsm_state20;
reg    out_mem_blk_n_B;
wire    ap_CS_fsm_state25;
wire    in1_mem_AWREADY;
wire    in1_mem_WREADY;
reg    in1_mem_ARVALID;
wire    in1_mem_ARREADY;
wire    in1_mem_RVALID;
reg    in1_mem_RREADY;
wire   [31:0] in1_mem_RDATA;
wire    in1_mem_RLAST;
wire   [0:0] in1_mem_RID;
wire   [0:0] in1_mem_RUSER;
wire   [1:0] in1_mem_RRESP;
wire    in1_mem_BVALID;
wire   [1:0] in1_mem_BRESP;
wire   [0:0] in1_mem_BID;
wire   [0:0] in1_mem_BUSER;
wire    in2_mem_AWREADY;
wire    in2_mem_WREADY;
reg    in2_mem_ARVALID;
wire    in2_mem_ARREADY;
wire    in2_mem_RVALID;
reg    in2_mem_RREADY;
wire   [31:0] in2_mem_RDATA;
wire    in2_mem_RLAST;
wire   [0:0] in2_mem_RID;
wire   [0:0] in2_mem_RUSER;
wire   [1:0] in2_mem_RRESP;
wire    in2_mem_BVALID;
wire   [1:0] in2_mem_BRESP;
wire   [0:0] in2_mem_BID;
wire   [0:0] in2_mem_BUSER;
reg    out_mem_AWVALID;
wire    out_mem_AWREADY;
reg    out_mem_WVALID;
wire    out_mem_WREADY;
reg    out_mem_ARVALID;
wire    out_mem_ARREADY;
wire    out_mem_RVALID;
reg    out_mem_RREADY;
wire   [31:0] out_mem_RDATA;
wire    out_mem_RLAST;
wire   [0:0] out_mem_RID;
wire   [0:0] out_mem_RUSER;
wire   [1:0] out_mem_RRESP;
wire    out_mem_BVALID;
reg    out_mem_BREADY;
wire   [1:0] out_mem_BRESP;
wire   [0:0] out_mem_BID;
wire   [0:0] out_mem_BUSER;
reg   [31:0] dim_read_reg_387;
wire   [32:0] p_cast11_fu_230_p1;
reg   [32:0] p_cast11_reg_397;
wire   [32:0] p_cast10_fu_244_p1;
reg   [32:0] p_cast10_reg_402;
wire   [32:0] p_cast_fu_258_p1;
reg   [32:0] p_cast_reg_407;
wire   [31:0] add_ln18_fu_262_p2;
reg   [31:0] add_ln18_reg_412;
wire    ap_CS_fsm_state2;
wire   [30:0] i_fu_276_p2;
reg   [30:0] i_reg_420;
reg   [31:0] in1_mem_addr_reg_425;
wire   [0:0] icmp_ln18_fu_271_p2;
wire   [31:0] j_fu_306_p2;
reg   [31:0] j_reg_434;
reg    ap_block_state3_io;
reg   [31:0] out_mem_addr_reg_439;
wire   [31:0] k_fu_342_p2;
reg   [31:0] k_reg_449;
wire    ap_CS_fsm_state10;
wire   [31:0] add_ln25_5_fu_348_p2;
reg   [31:0] add_ln25_5_reg_454;
wire   [0:0] icmp_ln22_fu_337_p2;
reg   [31:0] in2_mem_addr_reg_459;
reg  signed [31:0] in1_mem_addr_read_reg_465;
reg    ap_block_state18;
reg  signed [31:0] in2_mem_addr_read_reg_470;
reg   [31:0] out_mem_addr_read_reg_475;
wire   [31:0] add_ln25_3_fu_382_p2;
reg   [31:0] add_ln25_3_reg_480;
reg   [30:0] i_0_reg_163;
reg  signed [31:0] phi_mul8_reg_174;
reg   [31:0] j_0_reg_186;
reg   [31:0] k_0_reg_198;
wire    ap_CS_fsm_state9;
reg   [31:0] phi_mul_reg_209;
wire  signed [63:0] sext_ln25_1_fu_291_p1;
wire  signed [63:0] sext_ln25_3_fu_327_p1;
wire  signed [63:0] sext_ln25_5_fu_368_p1;
reg    ap_block_state11_io;
wire   [29:0] tmp_3_fu_220_p4;
wire   [29:0] tmp_4_fu_234_p4;
wire   [29:0] tmp_5_fu_248_p4;
wire   [31:0] zext_ln18_fu_267_p1;
wire  signed [32:0] sext_ln25_fu_282_p1;
wire   [32:0] add_ln25_1_fu_286_p2;
wire   [31:0] add_ln25_fu_312_p2;
wire  signed [32:0] sext_ln25_2_fu_318_p1;
wire   [32:0] add_ln25_4_fu_322_p2;
wire   [31:0] add_ln25_2_fu_353_p2;
wire  signed [32:0] sext_ln25_4_fu_359_p1;
wire   [32:0] add_ln25_6_fu_363_p2;
wire   [31:0] mul_ln25_fu_378_p2;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

mmult_params_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_PARAMS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_PARAMS_DATA_WIDTH ))
mmult_params_s_axi_U(
    .AWVALID(s_axi_params_AWVALID),
    .AWREADY(s_axi_params_AWREADY),
    .AWADDR(s_axi_params_AWADDR),
    .WVALID(s_axi_params_WVALID),
    .WREADY(s_axi_params_WREADY),
    .WDATA(s_axi_params_WDATA),
    .WSTRB(s_axi_params_WSTRB),
    .ARVALID(s_axi_params_ARVALID),
    .ARREADY(s_axi_params_ARREADY),
    .ARADDR(s_axi_params_ARADDR),
    .RVALID(s_axi_params_RVALID),
    .RREADY(s_axi_params_RREADY),
    .RDATA(s_axi_params_RDATA),
    .RRESP(s_axi_params_RRESP),
    .BVALID(s_axi_params_BVALID),
    .BREADY(s_axi_params_BREADY),
    .BRESP(s_axi_params_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in1(in1),
    .in2(in2),
    .out_r(out_r),
    .dim(dim)
);

mmult_in1_mem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN1_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN1_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN1_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN1_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN1_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN1_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN1_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN1_MEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN1_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN1_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN1_MEM_CACHE_VALUE ))
mmult_in1_mem_m_axi_U(
    .AWVALID(m_axi_in1_mem_AWVALID),
    .AWREADY(m_axi_in1_mem_AWREADY),
    .AWADDR(m_axi_in1_mem_AWADDR),
    .AWID(m_axi_in1_mem_AWID),
    .AWLEN(m_axi_in1_mem_AWLEN),
    .AWSIZE(m_axi_in1_mem_AWSIZE),
    .AWBURST(m_axi_in1_mem_AWBURST),
    .AWLOCK(m_axi_in1_mem_AWLOCK),
    .AWCACHE(m_axi_in1_mem_AWCACHE),
    .AWPROT(m_axi_in1_mem_AWPROT),
    .AWQOS(m_axi_in1_mem_AWQOS),
    .AWREGION(m_axi_in1_mem_AWREGION),
    .AWUSER(m_axi_in1_mem_AWUSER),
    .WVALID(m_axi_in1_mem_WVALID),
    .WREADY(m_axi_in1_mem_WREADY),
    .WDATA(m_axi_in1_mem_WDATA),
    .WSTRB(m_axi_in1_mem_WSTRB),
    .WLAST(m_axi_in1_mem_WLAST),
    .WID(m_axi_in1_mem_WID),
    .WUSER(m_axi_in1_mem_WUSER),
    .ARVALID(m_axi_in1_mem_ARVALID),
    .ARREADY(m_axi_in1_mem_ARREADY),
    .ARADDR(m_axi_in1_mem_ARADDR),
    .ARID(m_axi_in1_mem_ARID),
    .ARLEN(m_axi_in1_mem_ARLEN),
    .ARSIZE(m_axi_in1_mem_ARSIZE),
    .ARBURST(m_axi_in1_mem_ARBURST),
    .ARLOCK(m_axi_in1_mem_ARLOCK),
    .ARCACHE(m_axi_in1_mem_ARCACHE),
    .ARPROT(m_axi_in1_mem_ARPROT),
    .ARQOS(m_axi_in1_mem_ARQOS),
    .ARREGION(m_axi_in1_mem_ARREGION),
    .ARUSER(m_axi_in1_mem_ARUSER),
    .RVALID(m_axi_in1_mem_RVALID),
    .RREADY(m_axi_in1_mem_RREADY),
    .RDATA(m_axi_in1_mem_RDATA),
    .RLAST(m_axi_in1_mem_RLAST),
    .RID(m_axi_in1_mem_RID),
    .RUSER(m_axi_in1_mem_RUSER),
    .RRESP(m_axi_in1_mem_RRESP),
    .BVALID(m_axi_in1_mem_BVALID),
    .BREADY(m_axi_in1_mem_BREADY),
    .BRESP(m_axi_in1_mem_BRESP),
    .BID(m_axi_in1_mem_BID),
    .BUSER(m_axi_in1_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(in1_mem_ARVALID),
    .I_ARREADY(in1_mem_ARREADY),
    .I_ARADDR(in1_mem_addr_reg_425),
    .I_ARID(1'd0),
    .I_ARLEN(dim_read_reg_387),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(in1_mem_RVALID),
    .I_RREADY(in1_mem_RREADY),
    .I_RDATA(in1_mem_RDATA),
    .I_RID(in1_mem_RID),
    .I_RUSER(in1_mem_RUSER),
    .I_RRESP(in1_mem_RRESP),
    .I_RLAST(in1_mem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(in1_mem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(in1_mem_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(in1_mem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(in1_mem_BRESP),
    .I_BID(in1_mem_BID),
    .I_BUSER(in1_mem_BUSER)
);

mmult_in2_mem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN2_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN2_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN2_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN2_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN2_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN2_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN2_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN2_MEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN2_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN2_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN2_MEM_CACHE_VALUE ))
mmult_in2_mem_m_axi_U(
    .AWVALID(m_axi_in2_mem_AWVALID),
    .AWREADY(m_axi_in2_mem_AWREADY),
    .AWADDR(m_axi_in2_mem_AWADDR),
    .AWID(m_axi_in2_mem_AWID),
    .AWLEN(m_axi_in2_mem_AWLEN),
    .AWSIZE(m_axi_in2_mem_AWSIZE),
    .AWBURST(m_axi_in2_mem_AWBURST),
    .AWLOCK(m_axi_in2_mem_AWLOCK),
    .AWCACHE(m_axi_in2_mem_AWCACHE),
    .AWPROT(m_axi_in2_mem_AWPROT),
    .AWQOS(m_axi_in2_mem_AWQOS),
    .AWREGION(m_axi_in2_mem_AWREGION),
    .AWUSER(m_axi_in2_mem_AWUSER),
    .WVALID(m_axi_in2_mem_WVALID),
    .WREADY(m_axi_in2_mem_WREADY),
    .WDATA(m_axi_in2_mem_WDATA),
    .WSTRB(m_axi_in2_mem_WSTRB),
    .WLAST(m_axi_in2_mem_WLAST),
    .WID(m_axi_in2_mem_WID),
    .WUSER(m_axi_in2_mem_WUSER),
    .ARVALID(m_axi_in2_mem_ARVALID),
    .ARREADY(m_axi_in2_mem_ARREADY),
    .ARADDR(m_axi_in2_mem_ARADDR),
    .ARID(m_axi_in2_mem_ARID),
    .ARLEN(m_axi_in2_mem_ARLEN),
    .ARSIZE(m_axi_in2_mem_ARSIZE),
    .ARBURST(m_axi_in2_mem_ARBURST),
    .ARLOCK(m_axi_in2_mem_ARLOCK),
    .ARCACHE(m_axi_in2_mem_ARCACHE),
    .ARPROT(m_axi_in2_mem_ARPROT),
    .ARQOS(m_axi_in2_mem_ARQOS),
    .ARREGION(m_axi_in2_mem_ARREGION),
    .ARUSER(m_axi_in2_mem_ARUSER),
    .RVALID(m_axi_in2_mem_RVALID),
    .RREADY(m_axi_in2_mem_RREADY),
    .RDATA(m_axi_in2_mem_RDATA),
    .RLAST(m_axi_in2_mem_RLAST),
    .RID(m_axi_in2_mem_RID),
    .RUSER(m_axi_in2_mem_RUSER),
    .RRESP(m_axi_in2_mem_RRESP),
    .BVALID(m_axi_in2_mem_BVALID),
    .BREADY(m_axi_in2_mem_BREADY),
    .BRESP(m_axi_in2_mem_BRESP),
    .BID(m_axi_in2_mem_BID),
    .BUSER(m_axi_in2_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(in2_mem_ARVALID),
    .I_ARREADY(in2_mem_ARREADY),
    .I_ARADDR(in2_mem_addr_reg_459),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(in2_mem_RVALID),
    .I_RREADY(in2_mem_RREADY),
    .I_RDATA(in2_mem_RDATA),
    .I_RID(in2_mem_RID),
    .I_RUSER(in2_mem_RUSER),
    .I_RRESP(in2_mem_RRESP),
    .I_RLAST(in2_mem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(in2_mem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(in2_mem_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(in2_mem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(in2_mem_BRESP),
    .I_BID(in2_mem_BID),
    .I_BUSER(in2_mem_BUSER)
);

mmult_out_mem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_MEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUT_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_MEM_CACHE_VALUE ))
mmult_out_mem_m_axi_U(
    .AWVALID(m_axi_out_mem_AWVALID),
    .AWREADY(m_axi_out_mem_AWREADY),
    .AWADDR(m_axi_out_mem_AWADDR),
    .AWID(m_axi_out_mem_AWID),
    .AWLEN(m_axi_out_mem_AWLEN),
    .AWSIZE(m_axi_out_mem_AWSIZE),
    .AWBURST(m_axi_out_mem_AWBURST),
    .AWLOCK(m_axi_out_mem_AWLOCK),
    .AWCACHE(m_axi_out_mem_AWCACHE),
    .AWPROT(m_axi_out_mem_AWPROT),
    .AWQOS(m_axi_out_mem_AWQOS),
    .AWREGION(m_axi_out_mem_AWREGION),
    .AWUSER(m_axi_out_mem_AWUSER),
    .WVALID(m_axi_out_mem_WVALID),
    .WREADY(m_axi_out_mem_WREADY),
    .WDATA(m_axi_out_mem_WDATA),
    .WSTRB(m_axi_out_mem_WSTRB),
    .WLAST(m_axi_out_mem_WLAST),
    .WID(m_axi_out_mem_WID),
    .WUSER(m_axi_out_mem_WUSER),
    .ARVALID(m_axi_out_mem_ARVALID),
    .ARREADY(m_axi_out_mem_ARREADY),
    .ARADDR(m_axi_out_mem_ARADDR),
    .ARID(m_axi_out_mem_ARID),
    .ARLEN(m_axi_out_mem_ARLEN),
    .ARSIZE(m_axi_out_mem_ARSIZE),
    .ARBURST(m_axi_out_mem_ARBURST),
    .ARLOCK(m_axi_out_mem_ARLOCK),
    .ARCACHE(m_axi_out_mem_ARCACHE),
    .ARPROT(m_axi_out_mem_ARPROT),
    .ARQOS(m_axi_out_mem_ARQOS),
    .ARREGION(m_axi_out_mem_ARREGION),
    .ARUSER(m_axi_out_mem_ARUSER),
    .RVALID(m_axi_out_mem_RVALID),
    .RREADY(m_axi_out_mem_RREADY),
    .RDATA(m_axi_out_mem_RDATA),
    .RLAST(m_axi_out_mem_RLAST),
    .RID(m_axi_out_mem_RID),
    .RUSER(m_axi_out_mem_RUSER),
    .RRESP(m_axi_out_mem_RRESP),
    .BVALID(m_axi_out_mem_BVALID),
    .BREADY(m_axi_out_mem_BREADY),
    .BRESP(m_axi_out_mem_BRESP),
    .BID(m_axi_out_mem_BID),
    .BUSER(m_axi_out_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(out_mem_ARVALID),
    .I_ARREADY(out_mem_ARREADY),
    .I_ARADDR(out_mem_addr_reg_439),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(out_mem_RVALID),
    .I_RREADY(out_mem_RREADY),
    .I_RDATA(out_mem_RDATA),
    .I_RID(out_mem_RID),
    .I_RUSER(out_mem_RUSER),
    .I_RRESP(out_mem_RRESP),
    .I_RLAST(out_mem_RLAST),
    .I_AWVALID(out_mem_AWVALID),
    .I_AWREADY(out_mem_AWREADY),
    .I_AWADDR(out_mem_addr_reg_439),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(out_mem_WVALID),
    .I_WREADY(out_mem_WREADY),
    .I_WDATA(add_ln25_3_reg_480),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(out_mem_BVALID),
    .I_BREADY(out_mem_BREADY),
    .I_BRESP(out_mem_BRESP),
    .I_BID(out_mem_BID),
    .I_BUSER(out_mem_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln20_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_163 <= i_reg_420;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_163 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        j_0_reg_186 <= j_reg_434;
    end else if (((icmp_ln18_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_186 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((out_mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        k_0_reg_198 <= k_reg_449;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        k_0_reg_198 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln20_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul8_reg_174 <= add_ln18_reg_412;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul8_reg_174 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((out_mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        phi_mul_reg_209 <= add_ln25_5_reg_454;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        phi_mul_reg_209 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln18_reg_412 <= add_ln18_fu_262_p2;
        i_reg_420 <= i_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((out_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        add_ln25_3_reg_480 <= add_ln25_3_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln25_5_reg_454 <= add_ln25_5_fu_348_p2;
        in2_mem_addr_reg_459 <= sext_ln25_5_fu_368_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dim_read_reg_387 <= dim;
        p_cast10_reg_402[29 : 0] <= p_cast10_fu_244_p1[29 : 0];
        p_cast11_reg_397[29 : 0] <= p_cast11_fu_230_p1[29 : 0];
        p_cast_reg_407[29 : 0] <= p_cast_fu_258_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_mem_RVALID == 1'b0) | (in2_mem_RVALID == 1'b0) | (in1_mem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        in1_mem_addr_read_reg_465 <= in1_mem_RDATA;
        in2_mem_addr_read_reg_470 <= in2_mem_RDATA;
        out_mem_addr_read_reg_475 <= out_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in1_mem_addr_reg_425 <= sext_ln25_1_fu_291_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_434 <= j_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_reg_449 <= k_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln20_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_mem_addr_reg_439 <= sext_ln25_3_fu_327_p1;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln20_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in1_mem_ARVALID = 1'b1;
    end else begin
        in1_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_mem_RVALID == 1'b0) | (in2_mem_RVALID == 1'b0) | (in1_mem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        in1_mem_RREADY = 1'b1;
    end else begin
        in1_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in1_mem_blk_n_AR = m_axi_in1_mem_ARREADY;
    end else begin
        in1_mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        in1_mem_blk_n_R = m_axi_in1_mem_RVALID;
    end else begin
        in1_mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
        in2_mem_ARVALID = 1'b1;
    end else begin
        in2_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_mem_RVALID == 1'b0) | (in2_mem_RVALID == 1'b0) | (in1_mem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        in2_mem_RREADY = 1'b1;
    end else begin
        in2_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        in2_mem_blk_n_AR = m_axi_in2_mem_ARREADY;
    end else begin
        in2_mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        in2_mem_blk_n_R = m_axi_in2_mem_RVALID;
    end else begin
        in2_mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
        out_mem_ARVALID = 1'b1;
    end else begin
        out_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((out_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        out_mem_AWVALID = 1'b1;
    end else begin
        out_mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((out_mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        out_mem_BREADY = 1'b1;
    end else begin
        out_mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_mem_RVALID == 1'b0) | (in2_mem_RVALID == 1'b0) | (in1_mem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        out_mem_RREADY = 1'b1;
    end else begin
        out_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((out_mem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        out_mem_WVALID = 1'b1;
    end else begin
        out_mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_mem_blk_n_AR = m_axi_out_mem_ARREADY;
    end else begin
        out_mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        out_mem_blk_n_AW = m_axi_out_mem_AWREADY;
    end else begin
        out_mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        out_mem_blk_n_B = m_axi_out_mem_BVALID;
    end else begin
        out_mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        out_mem_blk_n_R = m_axi_out_mem_RVALID;
    end else begin
        out_mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        out_mem_blk_n_W = m_axi_out_mem_WREADY;
    end else begin
        out_mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln18_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (icmp_ln20_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b0 == ap_block_state3_io) & (icmp_ln20_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln22_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if ((~((out_mem_RVALID == 1'b0) | (in2_mem_RVALID == 1'b0) | (in1_mem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((out_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((out_mem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((out_mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_262_p2 = ($signed(phi_mul8_reg_174) + $signed(dim_read_reg_387));

assign add_ln25_1_fu_286_p2 = ($signed(sext_ln25_fu_282_p1) + $signed(p_cast_reg_407));

assign add_ln25_2_fu_353_p2 = (j_0_reg_186 + phi_mul_reg_209);

assign add_ln25_3_fu_382_p2 = (mul_ln25_fu_378_p2 + out_mem_addr_read_reg_475);

assign add_ln25_4_fu_322_p2 = ($signed(sext_ln25_2_fu_318_p1) + $signed(p_cast11_reg_397));

assign add_ln25_5_fu_348_p2 = (dim_read_reg_387 + phi_mul_reg_209);

assign add_ln25_6_fu_363_p2 = ($signed(sext_ln25_4_fu_359_p1) + $signed(p_cast10_reg_402));

assign add_ln25_fu_312_p2 = ($signed(phi_mul8_reg_174) + $signed(j_0_reg_186));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11_io = ((out_mem_ARREADY == 1'b0) | (in2_mem_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state18 = ((out_mem_RVALID == 1'b0) | (in2_mem_RVALID == 1'b0) | (in1_mem_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((in1_mem_ARREADY == 1'b0) & (icmp_ln20_fu_301_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_276_p2 = (i_0_reg_163 + 31'd1);

assign icmp_ln18_fu_271_p2 = (($signed(zext_ln18_fu_267_p1) < $signed(dim_read_reg_387)) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_301_p2 = ((j_0_reg_186 == dim_read_reg_387) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_337_p2 = ((k_0_reg_198 == dim_read_reg_387) ? 1'b1 : 1'b0);

assign j_fu_306_p2 = (j_0_reg_186 + 32'd1);

assign k_fu_342_p2 = (k_0_reg_198 + 32'd1);

assign mul_ln25_fu_378_p2 = ($signed(in1_mem_addr_read_reg_465) * $signed(in2_mem_addr_read_reg_470));

assign p_cast10_fu_244_p1 = tmp_4_fu_234_p4;

assign p_cast11_fu_230_p1 = tmp_3_fu_220_p4;

assign p_cast_fu_258_p1 = tmp_5_fu_248_p4;

assign sext_ln25_1_fu_291_p1 = $signed(add_ln25_1_fu_286_p2);

assign sext_ln25_2_fu_318_p1 = $signed(add_ln25_fu_312_p2);

assign sext_ln25_3_fu_327_p1 = $signed(add_ln25_4_fu_322_p2);

assign sext_ln25_4_fu_359_p1 = $signed(add_ln25_2_fu_353_p2);

assign sext_ln25_5_fu_368_p1 = $signed(add_ln25_6_fu_363_p2);

assign sext_ln25_fu_282_p1 = phi_mul8_reg_174;

assign tmp_3_fu_220_p4 = {{out_r[31:2]}};

assign tmp_4_fu_234_p4 = {{in2[31:2]}};

assign tmp_5_fu_248_p4 = {{in1[31:2]}};

assign zext_ln18_fu_267_p1 = i_0_reg_163;

always @ (posedge ap_clk) begin
    p_cast11_reg_397[32:30] <= 3'b000;
    p_cast10_reg_402[32:30] <= 3'b000;
    p_cast_reg_407[32:30] <= 3'b000;
end

endmodule //mmult

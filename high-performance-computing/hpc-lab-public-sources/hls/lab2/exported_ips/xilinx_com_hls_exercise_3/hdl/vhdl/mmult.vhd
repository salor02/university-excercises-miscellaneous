-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult is
generic (
    C_M_AXI_IN1_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IN1_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN1_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_MEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN2_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IN2_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN2_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN2_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN2_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN2_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN2_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN2_MEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_PARAMS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_PARAMS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN1_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN1_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN1_MEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IN2_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN2_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN2_MEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_MEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_in1_mem_AWVALID : OUT STD_LOGIC;
    m_axi_in1_mem_AWREADY : IN STD_LOGIC;
    m_axi_in1_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_in1_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_ID_WIDTH-1 downto 0);
    m_axi_in1_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in1_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in1_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in1_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_in1_mem_WVALID : OUT STD_LOGIC;
    m_axi_in1_mem_WREADY : IN STD_LOGIC;
    m_axi_in1_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_DATA_WIDTH-1 downto 0);
    m_axi_in1_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_in1_mem_WLAST : OUT STD_LOGIC;
    m_axi_in1_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_ID_WIDTH-1 downto 0);
    m_axi_in1_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_in1_mem_ARVALID : OUT STD_LOGIC;
    m_axi_in1_mem_ARREADY : IN STD_LOGIC;
    m_axi_in1_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_in1_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_ID_WIDTH-1 downto 0);
    m_axi_in1_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in1_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in1_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in1_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_in1_mem_RVALID : IN STD_LOGIC;
    m_axi_in1_mem_RREADY : OUT STD_LOGIC;
    m_axi_in1_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_DATA_WIDTH-1 downto 0);
    m_axi_in1_mem_RLAST : IN STD_LOGIC;
    m_axi_in1_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_ID_WIDTH-1 downto 0);
    m_axi_in1_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_in1_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_mem_BVALID : IN STD_LOGIC;
    m_axi_in1_mem_BREADY : OUT STD_LOGIC;
    m_axi_in1_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_ID_WIDTH-1 downto 0);
    m_axi_in1_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_MEM_BUSER_WIDTH-1 downto 0);
    m_axi_in2_mem_AWVALID : OUT STD_LOGIC;
    m_axi_in2_mem_AWREADY : IN STD_LOGIC;
    m_axi_in2_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_in2_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_ID_WIDTH-1 downto 0);
    m_axi_in2_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in2_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in2_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in2_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in2_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in2_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in2_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in2_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in2_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_in2_mem_WVALID : OUT STD_LOGIC;
    m_axi_in2_mem_WREADY : IN STD_LOGIC;
    m_axi_in2_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_DATA_WIDTH-1 downto 0);
    m_axi_in2_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_in2_mem_WLAST : OUT STD_LOGIC;
    m_axi_in2_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_ID_WIDTH-1 downto 0);
    m_axi_in2_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_in2_mem_ARVALID : OUT STD_LOGIC;
    m_axi_in2_mem_ARREADY : IN STD_LOGIC;
    m_axi_in2_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_in2_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_ID_WIDTH-1 downto 0);
    m_axi_in2_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in2_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in2_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in2_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in2_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in2_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in2_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in2_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in2_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_in2_mem_RVALID : IN STD_LOGIC;
    m_axi_in2_mem_RREADY : OUT STD_LOGIC;
    m_axi_in2_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_DATA_WIDTH-1 downto 0);
    m_axi_in2_mem_RLAST : IN STD_LOGIC;
    m_axi_in2_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_ID_WIDTH-1 downto 0);
    m_axi_in2_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_in2_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in2_mem_BVALID : IN STD_LOGIC;
    m_axi_in2_mem_BREADY : OUT STD_LOGIC;
    m_axi_in2_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in2_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_ID_WIDTH-1 downto 0);
    m_axi_in2_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN2_MEM_BUSER_WIDTH-1 downto 0);
    m_axi_out_mem_AWVALID : OUT STD_LOGIC;
    m_axi_out_mem_AWREADY : IN STD_LOGIC;
    m_axi_out_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_out_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_ID_WIDTH-1 downto 0);
    m_axi_out_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_out_mem_WVALID : OUT STD_LOGIC;
    m_axi_out_mem_WREADY : IN STD_LOGIC;
    m_axi_out_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_DATA_WIDTH-1 downto 0);
    m_axi_out_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_out_mem_WLAST : OUT STD_LOGIC;
    m_axi_out_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_ID_WIDTH-1 downto 0);
    m_axi_out_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_out_mem_ARVALID : OUT STD_LOGIC;
    m_axi_out_mem_ARREADY : IN STD_LOGIC;
    m_axi_out_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_out_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_ID_WIDTH-1 downto 0);
    m_axi_out_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_out_mem_RVALID : IN STD_LOGIC;
    m_axi_out_mem_RREADY : OUT STD_LOGIC;
    m_axi_out_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_DATA_WIDTH-1 downto 0);
    m_axi_out_mem_RLAST : IN STD_LOGIC;
    m_axi_out_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_ID_WIDTH-1 downto 0);
    m_axi_out_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_out_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_mem_BVALID : IN STD_LOGIC;
    m_axi_out_mem_BREADY : OUT STD_LOGIC;
    m_axi_out_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_ID_WIDTH-1 downto 0);
    m_axi_out_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_params_AWVALID : IN STD_LOGIC;
    s_axi_params_AWREADY : OUT STD_LOGIC;
    s_axi_params_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMS_ADDR_WIDTH-1 downto 0);
    s_axi_params_WVALID : IN STD_LOGIC;
    s_axi_params_WREADY : OUT STD_LOGIC;
    s_axi_params_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMS_DATA_WIDTH-1 downto 0);
    s_axi_params_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMS_DATA_WIDTH/8-1 downto 0);
    s_axi_params_ARVALID : IN STD_LOGIC;
    s_axi_params_ARREADY : OUT STD_LOGIC;
    s_axi_params_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMS_ADDR_WIDTH-1 downto 0);
    s_axi_params_RVALID : OUT STD_LOGIC;
    s_axi_params_RREADY : IN STD_LOGIC;
    s_axi_params_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_PARAMS_DATA_WIDTH-1 downto 0);
    s_axi_params_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_params_BVALID : OUT STD_LOGIC;
    s_axi_params_BREADY : IN STD_LOGIC;
    s_axi_params_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mmult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mmult,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3932262,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=28,HLS_SYN_FF=11990,HLS_SYN_LUT=10233,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r : STD_LOGIC_VECTOR (31 downto 0);
    signal dim : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal icmp_ln8_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal icmp_ln19_reg_600 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_600_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in2_mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal in2_mem_blk_n_R : STD_LOGIC;
    signal out_mem_blk_n_AR : STD_LOGIC;
    signal icmp_ln19_reg_600_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_mem_blk_n_R : STD_LOGIC;
    signal out_mem_blk_n_AW : STD_LOGIC;
    signal out_mem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal out_mem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal in1_mem_AWREADY : STD_LOGIC;
    signal in1_mem_WREADY : STD_LOGIC;
    signal in1_mem_ARVALID : STD_LOGIC;
    signal in1_mem_ARREADY : STD_LOGIC;
    signal in1_mem_RVALID : STD_LOGIC;
    signal in1_mem_RREADY : STD_LOGIC;
    signal in1_mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_mem_RLAST : STD_LOGIC;
    signal in1_mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal in1_mem_BVALID : STD_LOGIC;
    signal in1_mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal in1_mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal in2_mem_AWREADY : STD_LOGIC;
    signal in2_mem_WREADY : STD_LOGIC;
    signal in2_mem_ARVALID : STD_LOGIC;
    signal in2_mem_ARREADY : STD_LOGIC;
    signal in2_mem_RVALID : STD_LOGIC;
    signal in2_mem_RREADY : STD_LOGIC;
    signal in2_mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_mem_RLAST : STD_LOGIC;
    signal in2_mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal in2_mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal in2_mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal in2_mem_BVALID : STD_LOGIC;
    signal in2_mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal in2_mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal in2_mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal out_mem_AWVALID : STD_LOGIC;
    signal out_mem_AWREADY : STD_LOGIC;
    signal out_mem_WVALID : STD_LOGIC;
    signal out_mem_WREADY : STD_LOGIC;
    signal out_mem_ARVALID : STD_LOGIC;
    signal out_mem_ARREADY : STD_LOGIC;
    signal out_mem_RVALID : STD_LOGIC;
    signal out_mem_RREADY : STD_LOGIC;
    signal out_mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal out_mem_RLAST : STD_LOGIC;
    signal out_mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal out_mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal out_mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal out_mem_BVALID : STD_LOGIC;
    signal out_mem_BREADY : STD_LOGIC;
    signal out_mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal out_mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal out_mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten18_reg_171 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state78_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state93_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state108_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_0_reg_183 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_195 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal dim_read_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_539 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_reg_544 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_reg_549 : STD_LOGIC_VECTOR (29 downto 0);
    signal bound_fu_265_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_554 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast20_fu_271_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast20_reg_560 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_cast19_fu_274_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast19_reg_565 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast_fu_277_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast_reg_570 : STD_LOGIC_VECTOR (32 downto 0);
    signal cast5_fu_280_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal cast5_reg_575 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound7_fu_286_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound7_reg_580 : STD_LOGIC_VECTOR (95 downto 0);
    signal icmp_ln21_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_585 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln26_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln19_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_600_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_600_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_600_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_600_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_600_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln19_fu_317_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln19_reg_604 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln19_1_fu_328_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln19_1_reg_609 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state49_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state64_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state79_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state94_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state109_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln21_1_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_fu_398_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_fu_424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_mem_addr_reg_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_mem_addr_reg_632_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_mem_addr_reg_632_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_mem_addr_reg_632_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_mem_addr_reg_632_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_mem_addr_reg_632_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_mem_addr_reg_632_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal out_mem_addr_reg_638 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_mem_addr_reg_638_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal out_mem_addr_reg_638_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal out_mem_addr_reg_638_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal out_mem_addr_reg_638_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal out_mem_addr_reg_638_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal out_mem_addr_reg_638_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal out_mem_addr_reg_638_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_1_fu_462_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln21_1_reg_645 : STD_LOGIC_VECTOR (63 downto 0);
    signal in2_mem_addr_reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state35_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state50_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state65_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state80_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state95_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state110_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal in2_mem_addr_read_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state13_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage10_iter1 : BOOLEAN;
    signal ap_block_state43_pp0_stage10_iter2 : BOOLEAN;
    signal ap_block_state58_pp0_stage10_iter3 : BOOLEAN;
    signal ap_block_state73_pp0_stage10_iter4 : BOOLEAN;
    signal ap_block_state88_pp0_stage10_iter5 : BOOLEAN;
    signal ap_block_state103_pp0_stage10_iter6 : BOOLEAN;
    signal ap_block_state103_io : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal in2_mem_addr_read_reg_656_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_mem_addr_read_reg_656_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_mem_addr_read_reg_656_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_mem_addr_read_reg_656_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_mem_addr_read_reg_656_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_mem_addr_read_reg_656_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_4_fu_496_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln19_4_reg_661 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state17_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_state32_pp0_stage14_iter1 : BOOLEAN;
    signal ap_block_state47_pp0_stage14_iter2 : BOOLEAN;
    signal ap_block_state62_pp0_stage14_iter3 : BOOLEAN;
    signal ap_block_state77_pp0_stage14_iter4 : BOOLEAN;
    signal ap_block_state92_pp0_stage14_iter5 : BOOLEAN;
    signal ap_block_state107_pp0_stage14_iter6 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal k_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal select_ln21_1_fu_507_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln21_1_reg_671 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln8_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage9_iter1 : BOOLEAN;
    signal ap_block_state42_pp0_stage9_iter2 : BOOLEAN;
    signal ap_block_state57_pp0_stage9_iter3 : BOOLEAN;
    signal ap_block_state72_pp0_stage9_iter4 : BOOLEAN;
    signal ap_block_state87_pp0_stage9_iter5 : BOOLEAN;
    signal ap_block_state102_pp0_stage9_iter6 : BOOLEAN;
    signal ap_block_state117_pp0_stage9_iter7 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal in1_mem_addr_read_reg_680 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_mem_addr_read_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_3_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_3_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state36_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state51_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state66_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state81_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state96_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state111_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_state111_io : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten18_phi_fu_175_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_187_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_199_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_j_0_phi_fu_211_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_k_0_phi_fu_223_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln26_1_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_4_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_3_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state37_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state52_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state67_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state82_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state97_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_state112_pp0_stage4_iter7 : BOOLEAN;
    signal ap_block_state112_io : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal cast_fu_261_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_265_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cast_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound7_fu_286_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound7_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_fu_301_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_3_fu_351_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln26_3_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_1_fu_356_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_343_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_3_fu_379_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_1_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_2_fu_367_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_1_fu_412_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln19_fu_363_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln26_4_fu_432_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln26_fu_420_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln26_6_fu_447_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln26_1_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_2_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln26_2_fu_477_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln26_5_fu_481_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln26_2_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_ce : STD_LOGIC;
    signal ap_block_state8_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state38_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state53_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_state68_pp0_stage5_iter4 : BOOLEAN;
    signal ap_block_state83_pp0_stage5_iter5 : BOOLEAN;
    signal ap_block_state98_pp0_stage5_iter6 : BOOLEAN;
    signal ap_block_state113_pp0_stage5_iter7 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state9_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state39_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_state54_pp0_stage6_iter3 : BOOLEAN;
    signal ap_block_state69_pp0_stage6_iter4 : BOOLEAN;
    signal ap_block_state84_pp0_stage6_iter5 : BOOLEAN;
    signal ap_block_state99_pp0_stage6_iter6 : BOOLEAN;
    signal ap_block_state114_pp0_stage6_iter7 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state10_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state40_pp0_stage7_iter2 : BOOLEAN;
    signal ap_block_state55_pp0_stage7_iter3 : BOOLEAN;
    signal ap_block_state70_pp0_stage7_iter4 : BOOLEAN;
    signal ap_block_state85_pp0_stage7_iter5 : BOOLEAN;
    signal ap_block_state100_pp0_stage7_iter6 : BOOLEAN;
    signal ap_block_state115_pp0_stage7_iter7 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state11_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_state41_pp0_stage8_iter2 : BOOLEAN;
    signal ap_block_state56_pp0_stage8_iter3 : BOOLEAN;
    signal ap_block_state71_pp0_stage8_iter4 : BOOLEAN;
    signal ap_block_state86_pp0_stage8_iter5 : BOOLEAN;
    signal ap_block_state101_pp0_stage8_iter6 : BOOLEAN;
    signal ap_block_state116_pp0_stage8_iter7 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state14_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_state29_pp0_stage11_iter1 : BOOLEAN;
    signal ap_block_state44_pp0_stage11_iter2 : BOOLEAN;
    signal ap_block_state59_pp0_stage11_iter3 : BOOLEAN;
    signal ap_block_state74_pp0_stage11_iter4 : BOOLEAN;
    signal ap_block_state89_pp0_stage11_iter5 : BOOLEAN;
    signal ap_block_state104_pp0_stage11_iter6 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state15_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_state30_pp0_stage12_iter1 : BOOLEAN;
    signal ap_block_state45_pp0_stage12_iter2 : BOOLEAN;
    signal ap_block_state60_pp0_stage12_iter3 : BOOLEAN;
    signal ap_block_state75_pp0_stage12_iter4 : BOOLEAN;
    signal ap_block_state90_pp0_stage12_iter5 : BOOLEAN;
    signal ap_block_state105_pp0_stage12_iter6 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state16_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_state31_pp0_stage13_iter1 : BOOLEAN;
    signal ap_block_state46_pp0_stage13_iter2 : BOOLEAN;
    signal ap_block_state61_pp0_stage13_iter3 : BOOLEAN;
    signal ap_block_state76_pp0_stage13_iter4 : BOOLEAN;
    signal ap_block_state91_pp0_stage13_iter5 : BOOLEAN;
    signal ap_block_state106_pp0_stage13_iter6 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound7_fu_286_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound7_fu_286_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln26_3_fu_351_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_fu_301_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component mmult_urem_96ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (95 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component mmult_params_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        in2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        dim : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_in1_mem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mmult_in2_mem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mmult_out_mem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mmult_params_s_axi_U : component mmult_params_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_PARAMS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_PARAMS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_params_AWVALID,
        AWREADY => s_axi_params_AWREADY,
        AWADDR => s_axi_params_AWADDR,
        WVALID => s_axi_params_WVALID,
        WREADY => s_axi_params_WREADY,
        WDATA => s_axi_params_WDATA,
        WSTRB => s_axi_params_WSTRB,
        ARVALID => s_axi_params_ARVALID,
        ARREADY => s_axi_params_ARREADY,
        ARADDR => s_axi_params_ARADDR,
        RVALID => s_axi_params_RVALID,
        RREADY => s_axi_params_RREADY,
        RDATA => s_axi_params_RDATA,
        RRESP => s_axi_params_RRESP,
        BVALID => s_axi_params_BVALID,
        BREADY => s_axi_params_BREADY,
        BRESP => s_axi_params_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in1 => in1,
        in2 => in2,
        out_r => out_r,
        dim => dim);

    mmult_in1_mem_m_axi_U : component mmult_in1_mem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN1_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN1_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN1_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN1_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN1_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN1_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN1_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN1_MEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IN1_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN1_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN1_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_in1_mem_AWVALID,
        AWREADY => m_axi_in1_mem_AWREADY,
        AWADDR => m_axi_in1_mem_AWADDR,
        AWID => m_axi_in1_mem_AWID,
        AWLEN => m_axi_in1_mem_AWLEN,
        AWSIZE => m_axi_in1_mem_AWSIZE,
        AWBURST => m_axi_in1_mem_AWBURST,
        AWLOCK => m_axi_in1_mem_AWLOCK,
        AWCACHE => m_axi_in1_mem_AWCACHE,
        AWPROT => m_axi_in1_mem_AWPROT,
        AWQOS => m_axi_in1_mem_AWQOS,
        AWREGION => m_axi_in1_mem_AWREGION,
        AWUSER => m_axi_in1_mem_AWUSER,
        WVALID => m_axi_in1_mem_WVALID,
        WREADY => m_axi_in1_mem_WREADY,
        WDATA => m_axi_in1_mem_WDATA,
        WSTRB => m_axi_in1_mem_WSTRB,
        WLAST => m_axi_in1_mem_WLAST,
        WID => m_axi_in1_mem_WID,
        WUSER => m_axi_in1_mem_WUSER,
        ARVALID => m_axi_in1_mem_ARVALID,
        ARREADY => m_axi_in1_mem_ARREADY,
        ARADDR => m_axi_in1_mem_ARADDR,
        ARID => m_axi_in1_mem_ARID,
        ARLEN => m_axi_in1_mem_ARLEN,
        ARSIZE => m_axi_in1_mem_ARSIZE,
        ARBURST => m_axi_in1_mem_ARBURST,
        ARLOCK => m_axi_in1_mem_ARLOCK,
        ARCACHE => m_axi_in1_mem_ARCACHE,
        ARPROT => m_axi_in1_mem_ARPROT,
        ARQOS => m_axi_in1_mem_ARQOS,
        ARREGION => m_axi_in1_mem_ARREGION,
        ARUSER => m_axi_in1_mem_ARUSER,
        RVALID => m_axi_in1_mem_RVALID,
        RREADY => m_axi_in1_mem_RREADY,
        RDATA => m_axi_in1_mem_RDATA,
        RLAST => m_axi_in1_mem_RLAST,
        RID => m_axi_in1_mem_RID,
        RUSER => m_axi_in1_mem_RUSER,
        RRESP => m_axi_in1_mem_RRESP,
        BVALID => m_axi_in1_mem_BVALID,
        BREADY => m_axi_in1_mem_BREADY,
        BRESP => m_axi_in1_mem_BRESP,
        BID => m_axi_in1_mem_BID,
        BUSER => m_axi_in1_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => in1_mem_ARVALID,
        I_ARREADY => in1_mem_ARREADY,
        I_ARADDR => in1_mem_addr_reg_632_pp0_iter6_reg,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => dim_read_reg_528,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => in1_mem_RVALID,
        I_RREADY => in1_mem_RREADY,
        I_RDATA => in1_mem_RDATA,
        I_RID => in1_mem_RID,
        I_RUSER => in1_mem_RUSER,
        I_RRESP => in1_mem_RRESP,
        I_RLAST => in1_mem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => in1_mem_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => in1_mem_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => in1_mem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => in1_mem_BRESP,
        I_BID => in1_mem_BID,
        I_BUSER => in1_mem_BUSER);

    mmult_in2_mem_m_axi_U : component mmult_in2_mem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN2_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN2_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN2_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN2_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN2_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN2_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN2_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN2_MEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IN2_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN2_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN2_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_in2_mem_AWVALID,
        AWREADY => m_axi_in2_mem_AWREADY,
        AWADDR => m_axi_in2_mem_AWADDR,
        AWID => m_axi_in2_mem_AWID,
        AWLEN => m_axi_in2_mem_AWLEN,
        AWSIZE => m_axi_in2_mem_AWSIZE,
        AWBURST => m_axi_in2_mem_AWBURST,
        AWLOCK => m_axi_in2_mem_AWLOCK,
        AWCACHE => m_axi_in2_mem_AWCACHE,
        AWPROT => m_axi_in2_mem_AWPROT,
        AWQOS => m_axi_in2_mem_AWQOS,
        AWREGION => m_axi_in2_mem_AWREGION,
        AWUSER => m_axi_in2_mem_AWUSER,
        WVALID => m_axi_in2_mem_WVALID,
        WREADY => m_axi_in2_mem_WREADY,
        WDATA => m_axi_in2_mem_WDATA,
        WSTRB => m_axi_in2_mem_WSTRB,
        WLAST => m_axi_in2_mem_WLAST,
        WID => m_axi_in2_mem_WID,
        WUSER => m_axi_in2_mem_WUSER,
        ARVALID => m_axi_in2_mem_ARVALID,
        ARREADY => m_axi_in2_mem_ARREADY,
        ARADDR => m_axi_in2_mem_ARADDR,
        ARID => m_axi_in2_mem_ARID,
        ARLEN => m_axi_in2_mem_ARLEN,
        ARSIZE => m_axi_in2_mem_ARSIZE,
        ARBURST => m_axi_in2_mem_ARBURST,
        ARLOCK => m_axi_in2_mem_ARLOCK,
        ARCACHE => m_axi_in2_mem_ARCACHE,
        ARPROT => m_axi_in2_mem_ARPROT,
        ARQOS => m_axi_in2_mem_ARQOS,
        ARREGION => m_axi_in2_mem_ARREGION,
        ARUSER => m_axi_in2_mem_ARUSER,
        RVALID => m_axi_in2_mem_RVALID,
        RREADY => m_axi_in2_mem_RREADY,
        RDATA => m_axi_in2_mem_RDATA,
        RLAST => m_axi_in2_mem_RLAST,
        RID => m_axi_in2_mem_RID,
        RUSER => m_axi_in2_mem_RUSER,
        RRESP => m_axi_in2_mem_RRESP,
        BVALID => m_axi_in2_mem_BVALID,
        BREADY => m_axi_in2_mem_BREADY,
        BRESP => m_axi_in2_mem_BRESP,
        BID => m_axi_in2_mem_BID,
        BUSER => m_axi_in2_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => in2_mem_ARVALID,
        I_ARREADY => in2_mem_ARREADY,
        I_ARADDR => in2_mem_addr_reg_650,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => in2_mem_RVALID,
        I_RREADY => in2_mem_RREADY,
        I_RDATA => in2_mem_RDATA,
        I_RID => in2_mem_RID,
        I_RUSER => in2_mem_RUSER,
        I_RRESP => in2_mem_RRESP,
        I_RLAST => in2_mem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => in2_mem_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => in2_mem_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => in2_mem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => in2_mem_BRESP,
        I_BID => in2_mem_BID,
        I_BUSER => in2_mem_BUSER);

    mmult_out_mem_m_axi_U : component mmult_out_mem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_MEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUT_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_out_mem_AWVALID,
        AWREADY => m_axi_out_mem_AWREADY,
        AWADDR => m_axi_out_mem_AWADDR,
        AWID => m_axi_out_mem_AWID,
        AWLEN => m_axi_out_mem_AWLEN,
        AWSIZE => m_axi_out_mem_AWSIZE,
        AWBURST => m_axi_out_mem_AWBURST,
        AWLOCK => m_axi_out_mem_AWLOCK,
        AWCACHE => m_axi_out_mem_AWCACHE,
        AWPROT => m_axi_out_mem_AWPROT,
        AWQOS => m_axi_out_mem_AWQOS,
        AWREGION => m_axi_out_mem_AWREGION,
        AWUSER => m_axi_out_mem_AWUSER,
        WVALID => m_axi_out_mem_WVALID,
        WREADY => m_axi_out_mem_WREADY,
        WDATA => m_axi_out_mem_WDATA,
        WSTRB => m_axi_out_mem_WSTRB,
        WLAST => m_axi_out_mem_WLAST,
        WID => m_axi_out_mem_WID,
        WUSER => m_axi_out_mem_WUSER,
        ARVALID => m_axi_out_mem_ARVALID,
        ARREADY => m_axi_out_mem_ARREADY,
        ARADDR => m_axi_out_mem_ARADDR,
        ARID => m_axi_out_mem_ARID,
        ARLEN => m_axi_out_mem_ARLEN,
        ARSIZE => m_axi_out_mem_ARSIZE,
        ARBURST => m_axi_out_mem_ARBURST,
        ARLOCK => m_axi_out_mem_ARLOCK,
        ARCACHE => m_axi_out_mem_ARCACHE,
        ARPROT => m_axi_out_mem_ARPROT,
        ARQOS => m_axi_out_mem_ARQOS,
        ARREGION => m_axi_out_mem_ARREGION,
        ARUSER => m_axi_out_mem_ARUSER,
        RVALID => m_axi_out_mem_RVALID,
        RREADY => m_axi_out_mem_RREADY,
        RDATA => m_axi_out_mem_RDATA,
        RLAST => m_axi_out_mem_RLAST,
        RID => m_axi_out_mem_RID,
        RUSER => m_axi_out_mem_RUSER,
        RRESP => m_axi_out_mem_RRESP,
        BVALID => m_axi_out_mem_BVALID,
        BREADY => m_axi_out_mem_BREADY,
        BRESP => m_axi_out_mem_BRESP,
        BID => m_axi_out_mem_BID,
        BUSER => m_axi_out_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => out_mem_ARVALID,
        I_ARREADY => out_mem_ARREADY,
        I_ARADDR => out_mem_addr_reg_638_pp0_iter6_reg,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => out_mem_RVALID,
        I_RREADY => out_mem_RREADY,
        I_RDATA => out_mem_RDATA,
        I_RID => out_mem_RID,
        I_RUSER => out_mem_RUSER,
        I_RRESP => out_mem_RRESP,
        I_RLAST => out_mem_RLAST,
        I_AWVALID => out_mem_AWVALID,
        I_AWREADY => out_mem_AWREADY,
        I_AWADDR => out_mem_addr_reg_638_pp0_iter7_reg,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => out_mem_WVALID,
        I_WREADY => out_mem_WREADY,
        I_WDATA => add_ln26_3_reg_690,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => out_mem_BVALID,
        I_BREADY => out_mem_BREADY,
        I_BRESP => out_mem_BRESP,
        I_BID => out_mem_BID,
        I_BUSER => out_mem_BUSER);

    mmult_urem_96ns_3bkb_U1 : component mmult_urem_96ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 100,
        din0_WIDTH => 96,
        din1_WIDTH => 32,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_phi_mux_indvar_flatten18_phi_fu_175_p4,
        din1 => grp_fu_323_p1,
        ce => grp_fu_323_ce,
        dout => grp_fu_323_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_183 <= select_ln19_4_reg_661;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_0_reg_183 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten18_reg_171 <= add_ln19_reg_604;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten18_reg_171 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln19_reg_600_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten_reg_195 <= select_ln21_1_reg_671;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_195 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_reg_207 <= select_ln21_reg_626;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_0_reg_207 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln19_reg_600_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                k_0_reg_219 <= k_reg_666;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                k_0_reg_219 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln19_1_reg_609 <= add_ln19_1_fu_328_p2;
                add_ln21_1_reg_645 <= add_ln21_1_fu_462_p2;
                icmp_ln21_1_reg_614 <= icmp_ln21_1_fu_338_p2;
                in1_mem_addr_reg_632 <= sext_ln26_1_fu_437_p1(32 - 1 downto 0);
                out_mem_addr_reg_638 <= sext_ln26_4_fu_452_p1(32 - 1 downto 0);
                select_ln26_reg_620 <= select_ln26_fu_398_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln19_reg_604 <= add_ln19_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln26_3_reg_690 <= add_ln26_3_fu_523_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln26_reg_595 <= add_ln26_fu_306_p2;
                icmp_ln19_reg_600 <= icmp_ln19_fu_312_p2;
                icmp_ln19_reg_600_pp0_iter1_reg <= icmp_ln19_reg_600;
                icmp_ln19_reg_600_pp0_iter2_reg <= icmp_ln19_reg_600_pp0_iter1_reg;
                icmp_ln19_reg_600_pp0_iter3_reg <= icmp_ln19_reg_600_pp0_iter2_reg;
                icmp_ln19_reg_600_pp0_iter4_reg <= icmp_ln19_reg_600_pp0_iter3_reg;
                icmp_ln19_reg_600_pp0_iter5_reg <= icmp_ln19_reg_600_pp0_iter4_reg;
                icmp_ln19_reg_600_pp0_iter6_reg <= icmp_ln19_reg_600_pp0_iter5_reg;
                icmp_ln19_reg_600_pp0_iter7_reg <= icmp_ln19_reg_600_pp0_iter6_reg;
                mul_ln26_reg_590 <= mul_ln26_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound7_reg_580 <= bound7_fu_286_p2;
                    cast5_reg_575(31 downto 0) <= cast5_fu_280_p1(31 downto 0);
                icmp_ln21_reg_585 <= icmp_ln21_fu_292_p2;
                    p_cast19_reg_565(29 downto 0) <= p_cast19_fu_274_p1(29 downto 0);
                    p_cast20_reg_560(29 downto 0) <= p_cast20_fu_271_p1(29 downto 0);
                    p_cast_reg_570(29 downto 0) <= p_cast_fu_277_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_554 <= bound_fu_265_p2;
                dim_read_reg_528 <= dim;
                tmp_1_reg_544 <= in2(31 downto 2);
                tmp_3_reg_549 <= in1(31 downto 2);
                tmp_reg_539 <= out_r(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (icmp_ln19_reg_600_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                icmp_ln8_reg_676 <= icmp_ln8_fu_513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                in1_mem_addr_read_reg_680 <= in1_mem_RDATA;
                out_mem_addr_read_reg_685 <= out_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                in1_mem_addr_reg_632_pp0_iter1_reg <= in1_mem_addr_reg_632;
                in1_mem_addr_reg_632_pp0_iter2_reg <= in1_mem_addr_reg_632_pp0_iter1_reg;
                in1_mem_addr_reg_632_pp0_iter3_reg <= in1_mem_addr_reg_632_pp0_iter2_reg;
                in1_mem_addr_reg_632_pp0_iter4_reg <= in1_mem_addr_reg_632_pp0_iter3_reg;
                in1_mem_addr_reg_632_pp0_iter5_reg <= in1_mem_addr_reg_632_pp0_iter4_reg;
                in1_mem_addr_reg_632_pp0_iter6_reg <= in1_mem_addr_reg_632_pp0_iter5_reg;
                out_mem_addr_reg_638_pp0_iter1_reg <= out_mem_addr_reg_638;
                out_mem_addr_reg_638_pp0_iter2_reg <= out_mem_addr_reg_638_pp0_iter1_reg;
                out_mem_addr_reg_638_pp0_iter3_reg <= out_mem_addr_reg_638_pp0_iter2_reg;
                out_mem_addr_reg_638_pp0_iter4_reg <= out_mem_addr_reg_638_pp0_iter3_reg;
                out_mem_addr_reg_638_pp0_iter5_reg <= out_mem_addr_reg_638_pp0_iter4_reg;
                out_mem_addr_reg_638_pp0_iter6_reg <= out_mem_addr_reg_638_pp0_iter5_reg;
                out_mem_addr_reg_638_pp0_iter7_reg <= out_mem_addr_reg_638_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                in2_mem_addr_read_reg_656 <= in2_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                in2_mem_addr_read_reg_656_pp0_iter1_reg <= in2_mem_addr_read_reg_656;
                in2_mem_addr_read_reg_656_pp0_iter2_reg <= in2_mem_addr_read_reg_656_pp0_iter1_reg;
                in2_mem_addr_read_reg_656_pp0_iter3_reg <= in2_mem_addr_read_reg_656_pp0_iter2_reg;
                in2_mem_addr_read_reg_656_pp0_iter4_reg <= in2_mem_addr_read_reg_656_pp0_iter3_reg;
                in2_mem_addr_read_reg_656_pp0_iter5_reg <= in2_mem_addr_read_reg_656_pp0_iter4_reg;
                in2_mem_addr_read_reg_656_pp0_iter6_reg <= in2_mem_addr_read_reg_656_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                in2_mem_addr_reg_650 <= sext_ln26_3_fu_486_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                k_reg_666 <= k_fu_502_p2;
                select_ln21_1_reg_671 <= select_ln21_1_fu_507_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln19_4_reg_661 <= select_ln19_4_fu_496_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln21_reg_626 <= select_ln21_fu_424_p3;
            end if;
        end if;
    end process;
    p_cast20_reg_560(32 downto 30) <= "000";
    p_cast19_reg_565(32 downto 30) <= "000";
    p_cast_reg_570(32 downto 30) <= "000";
    cast5_reg_575(95 downto 32) <= "0000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, icmp_ln19_fu_312_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln19_fu_312_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln19_fu_312_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state118;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage9_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state118;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln19_1_fu_328_p2 <= std_logic_vector(unsigned(i_0_reg_183) + unsigned(ap_const_lv31_1));
    add_ln19_fu_317_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten18_phi_fu_175_p4) + unsigned(ap_const_lv96_1));
    add_ln21_1_fu_462_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_199_p4) + unsigned(ap_const_lv64_1));
    add_ln26_1_fu_406_p2 <= std_logic_vector(unsigned(j_fu_386_p2) + unsigned(select_ln19_1_fu_356_p3));
    add_ln26_2_fu_472_p2 <= std_logic_vector(unsigned(mul_ln26_1_fu_468_p2) + unsigned(select_ln21_reg_626));
    add_ln26_3_fu_523_p2 <= std_logic_vector(unsigned(out_mem_addr_read_reg_685) + unsigned(mul_ln26_2_fu_519_p2));
    add_ln26_4_fu_432_p2 <= std_logic_vector(signed(sext_ln19_fu_363_p1) + signed(p_cast_reg_570));
    add_ln26_5_fu_481_p2 <= std_logic_vector(signed(sext_ln26_2_fu_477_p1) + signed(p_cast19_reg_565));
    add_ln26_6_fu_447_p2 <= std_logic_vector(signed(sext_ln26_fu_420_p1) + signed(p_cast20_reg_560));
    add_ln26_fu_306_p2 <= std_logic_vector(unsigned(mul_ln26_fu_301_p2) + unsigned(ap_phi_mux_j_0_phi_fu_211_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state118 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln19_reg_600, ap_enable_reg_pp0_iter0, in2_mem_RVALID, ap_block_state103_io)
    begin
                ap_block_pp0_stage10_11001 <= (((in2_mem_RVALID = ap_const_logic_0) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state103_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln19_reg_600, ap_enable_reg_pp0_iter0, in2_mem_RVALID, ap_block_state103_io)
    begin
                ap_block_pp0_stage10_subdone <= (((in2_mem_RVALID = ap_const_logic_0) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state103_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, in1_mem_RVALID, out_mem_RVALID)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (((out_mem_RVALID = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0)) or ((in1_mem_RVALID = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, in1_mem_RVALID, out_mem_RVALID)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (((out_mem_RVALID = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0)) or ((in1_mem_RVALID = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0))));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_block_state6_io, ap_block_state111_io)
    begin
                ap_block_pp0_stage3_11001 <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state111_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_block_state6_io, ap_block_state111_io)
    begin
                ap_block_pp0_stage3_subdone <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state111_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_state112_io)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_const_boolean_1 = ap_block_state112_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_state112_io)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_const_boolean_1 = ap_block_state112_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, out_mem_BVALID)
    begin
                ap_block_pp0_stage9_11001 <= ((out_mem_BVALID = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage9_subdone_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, out_mem_BVALID)
    begin
                ap_block_pp0_stage9_subdone <= ((out_mem_BVALID = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;

        ap_block_state100_pp0_stage7_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp0_stage8_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp0_stage9_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state103_io_assign_proc : process(icmp_ln8_reg_676, icmp_ln19_reg_600_pp0_iter6_reg, in1_mem_ARREADY, out_mem_ARREADY)
    begin
                ap_block_state103_io <= (((out_mem_ARREADY = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter6_reg = ap_const_lv1_0)) or ((in1_mem_ARREADY = ap_const_logic_0) and (icmp_ln8_reg_676 = ap_const_lv1_1)));
    end process;

        ap_block_state103_pp0_stage10_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp0_stage11_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp0_stage12_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp0_stage13_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp0_stage14_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state110_pp0_stage2_iter7_assign_proc : process(icmp_ln19_reg_600_pp0_iter7_reg, in1_mem_RVALID, out_mem_RVALID)
    begin
                ap_block_state110_pp0_stage2_iter7 <= (((out_mem_RVALID = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0)) or ((in1_mem_RVALID = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0)));
    end process;


    ap_block_state111_io_assign_proc : process(icmp_ln19_reg_600_pp0_iter7_reg, out_mem_AWREADY)
    begin
                ap_block_state111_io <= ((out_mem_AWREADY = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0));
    end process;

        ap_block_state111_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state112_io_assign_proc : process(icmp_ln19_reg_600_pp0_iter7_reg, out_mem_WREADY)
    begin
                ap_block_state112_io <= ((out_mem_WREADY = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0));
    end process;

        ap_block_state112_pp0_stage4_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp0_stage5_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp0_stage6_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp0_stage7_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp0_stage8_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state117_pp0_stage9_iter7_assign_proc : process(icmp_ln19_reg_600_pp0_iter7_reg, out_mem_BVALID)
    begin
                ap_block_state117_pp0_stage9_iter7 <= ((out_mem_BVALID = ap_const_logic_0) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage10_iter0_assign_proc : process(icmp_ln19_reg_600, in2_mem_RVALID)
    begin
                ap_block_state13_pp0_stage10_iter0 <= ((in2_mem_RVALID = ap_const_logic_0) and (icmp_ln19_reg_600 = ap_const_lv1_0));
    end process;

        ap_block_state14_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage9_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage10_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage11_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage12_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage13_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage14_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage8_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage9_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage10_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage11_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage12_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage13_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage14_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage7_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage8_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage9_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage10_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage11_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage12_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage13_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage14_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage5_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage6_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(icmp_ln19_reg_600, in2_mem_ARREADY)
    begin
                ap_block_state6_io <= ((in2_mem_ARREADY = ap_const_logic_0) and (icmp_ln19_reg_600 = ap_const_lv1_0));
    end process;

        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage7_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage8_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage9_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage10_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage11_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage12_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage13_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage14_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp0_stage5_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp0_stage6_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp0_stage7_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage8_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage9_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp0_stage10_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp0_stage11_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp0_stage12_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp0_stage13_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp0_stage14_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp0_stage5_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp0_stage6_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln19_fu_312_p2)
    begin
        if ((icmp_ln19_fu_312_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_187_p4_assign_proc : process(icmp_ln19_reg_600, ap_CS_fsm_pp0_stage0, i_0_reg_183, select_ln19_4_reg_661, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_187_p4 <= select_ln19_4_reg_661;
        else 
            ap_phi_mux_i_0_phi_fu_187_p4 <= i_0_reg_183;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten18_phi_fu_175_p4_assign_proc : process(icmp_ln19_reg_600, indvar_flatten18_reg_171, ap_CS_fsm_pp0_stage0, add_ln19_reg_604, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten18_phi_fu_175_p4 <= add_ln19_reg_604;
        else 
            ap_phi_mux_indvar_flatten18_phi_fu_175_p4 <= indvar_flatten18_reg_171;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_199_p4_assign_proc : process(indvar_flatten_reg_195, icmp_ln19_reg_600_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, select_ln21_1_reg_671, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln19_reg_600_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_199_p4 <= select_ln21_1_reg_671;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_199_p4 <= indvar_flatten_reg_195;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_211_p4_assign_proc : process(icmp_ln19_reg_600, ap_CS_fsm_pp0_stage0, j_0_reg_207, select_ln21_reg_626, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_211_p4 <= select_ln21_reg_626;
        else 
            ap_phi_mux_j_0_phi_fu_211_p4 <= j_0_reg_207;
        end if; 
    end process;


    ap_phi_mux_k_0_phi_fu_223_p4_assign_proc : process(k_0_reg_219, icmp_ln19_reg_600_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, k_reg_666, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln19_reg_600_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_k_0_phi_fu_223_p4 <= k_reg_666;
        else 
            ap_phi_mux_k_0_phi_fu_223_p4 <= k_0_reg_219;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound7_fu_286_p0 <= bound7_fu_286_p00(64 - 1 downto 0);
    bound7_fu_286_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_reg_554),96));
    bound7_fu_286_p1 <= bound7_fu_286_p10(32 - 1 downto 0);
    bound7_fu_286_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_read_reg_528),96));
    bound7_fu_286_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound7_fu_286_p0) * unsigned(bound7_fu_286_p1), 96));
    bound_fu_265_p0 <= cast_fu_261_p1(32 - 1 downto 0);
    bound_fu_265_p1 <= cast_fu_261_p1(32 - 1 downto 0);
    bound_fu_265_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_265_p0) * unsigned(bound_fu_265_p1), 64));
    cast5_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_read_reg_528),96));
    cast_fu_261_p0 <= dim;
    cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast_fu_261_p0),64));

    grp_fu_323_ce_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage13)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)))) then 
            grp_fu_323_ce <= ap_const_logic_1;
        else 
            grp_fu_323_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_323_p1 <= cast5_reg_575(32 - 1 downto 0);
    icmp_ln19_fu_312_p2 <= "1" when (ap_phi_mux_indvar_flatten18_phi_fu_175_p4 = bound7_reg_580) else "0";
    icmp_ln21_1_fu_338_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_199_p4 = bound_reg_554) else "0";
    icmp_ln21_fu_292_p2 <= "1" when (dim_read_reg_528 = ap_const_lv32_0) else "0";
    icmp_ln23_fu_374_p2 <= "1" when (ap_phi_mux_k_0_phi_fu_223_p4 = dim_read_reg_528) else "0";
    icmp_ln8_fu_513_p2 <= "1" when (grp_fu_323_p2 = ap_const_lv96_0) else "0";

    in1_mem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter6, icmp_ln8_reg_676, ap_block_pp0_stage10_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln8_reg_676 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            in1_mem_ARVALID <= ap_const_logic_1;
        else 
            in1_mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    in1_mem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            in1_mem_RREADY <= ap_const_logic_1;
        else 
            in1_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    in1_mem_blk_n_AR_assign_proc : process(m_axi_in1_mem_ARREADY, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter6, ap_block_pp0_stage10, icmp_ln8_reg_676)
    begin
        if (((icmp_ln8_reg_676 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            in1_mem_blk_n_AR <= m_axi_in1_mem_ARREADY;
        else 
            in1_mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    in1_mem_blk_n_R_assign_proc : process(m_axi_in1_mem_RVALID, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter7, ap_block_pp0_stage2, icmp_ln19_reg_600_pp0_iter7_reg)
    begin
        if (((icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            in1_mem_blk_n_R <= m_axi_in1_mem_RVALID;
        else 
            in1_mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    in2_mem_ARVALID_assign_proc : process(icmp_ln19_reg_600, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            in2_mem_ARVALID <= ap_const_logic_1;
        else 
            in2_mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    in2_mem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage10, icmp_ln19_reg_600, ap_enable_reg_pp0_iter0, ap_block_pp0_stage10_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            in2_mem_RREADY <= ap_const_logic_1;
        else 
            in2_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    in2_mem_blk_n_AR_assign_proc : process(m_axi_in2_mem_ARREADY, icmp_ln19_reg_600, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            in2_mem_blk_n_AR <= m_axi_in2_mem_ARREADY;
        else 
            in2_mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    in2_mem_blk_n_R_assign_proc : process(m_axi_in2_mem_RVALID, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, icmp_ln19_reg_600, ap_enable_reg_pp0_iter0)
    begin
        if (((icmp_ln19_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            in2_mem_blk_n_R <= m_axi_in2_mem_RVALID;
        else 
            in2_mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    j_fu_386_p2 <= std_logic_vector(unsigned(select_ln19_fu_343_p3) + unsigned(ap_const_lv32_1));
    k_fu_502_p2 <= std_logic_vector(signed(select_ln26_reg_620) + signed(ap_const_lv32_1));
    mul_ln26_1_fu_468_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &dim_read_reg_528) * signed(select_ln26_reg_620))), 32));
    mul_ln26_2_fu_519_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(in2_mem_addr_read_reg_656_pp0_iter6_reg) * signed(in1_mem_addr_read_reg_680))), 32));
    mul_ln26_3_fu_351_p1 <= mul_ln26_3_fu_351_p10(31 - 1 downto 0);
    mul_ln26_3_fu_351_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_1_fu_328_p2),32));
    mul_ln26_3_fu_351_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_read_reg_528) * unsigned(mul_ln26_3_fu_351_p1), 32));
    mul_ln26_fu_301_p1 <= mul_ln26_fu_301_p10(31 - 1 downto 0);
    mul_ln26_fu_301_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_187_p4),32));
    mul_ln26_fu_301_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_read_reg_528) * unsigned(mul_ln26_fu_301_p1), 32));
    or_ln26_fu_392_p2 <= (select_ln19_3_fu_379_p3 or icmp_ln21_1_fu_338_p2);

    out_mem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter6, icmp_ln19_reg_600_pp0_iter6_reg, ap_block_pp0_stage10_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln19_reg_600_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            out_mem_ARVALID <= ap_const_logic_1;
        else 
            out_mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_mem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            out_mem_AWVALID <= ap_const_logic_1;
        else 
            out_mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_mem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            out_mem_BREADY <= ap_const_logic_1;
        else 
            out_mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    out_mem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            out_mem_RREADY <= ap_const_logic_1;
        else 
            out_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    out_mem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            out_mem_WVALID <= ap_const_logic_1;
        else 
            out_mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_mem_blk_n_AR_assign_proc : process(m_axi_out_mem_ARREADY, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter6, ap_block_pp0_stage10, icmp_ln19_reg_600_pp0_iter6_reg)
    begin
        if (((icmp_ln19_reg_600_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            out_mem_blk_n_AR <= m_axi_out_mem_ARREADY;
        else 
            out_mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    out_mem_blk_n_AW_assign_proc : process(m_axi_out_mem_AWREADY, ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            out_mem_blk_n_AW <= m_axi_out_mem_AWREADY;
        else 
            out_mem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    out_mem_blk_n_B_assign_proc : process(m_axi_out_mem_BVALID, ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage9) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            out_mem_blk_n_B <= m_axi_out_mem_BVALID;
        else 
            out_mem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    out_mem_blk_n_R_assign_proc : process(m_axi_out_mem_RVALID, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter7, ap_block_pp0_stage2, icmp_ln19_reg_600_pp0_iter7_reg)
    begin
        if (((icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            out_mem_blk_n_R <= m_axi_out_mem_RVALID;
        else 
            out_mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    out_mem_blk_n_W_assign_proc : process(m_axi_out_mem_WREADY, ap_enable_reg_pp0_iter7, icmp_ln19_reg_600_pp0_iter7_reg, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (icmp_ln19_reg_600_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            out_mem_blk_n_W <= m_axi_out_mem_WREADY;
        else 
            out_mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    p_cast19_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_544),33));
    p_cast20_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_539),33));
    p_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_549),33));
    select_ln19_1_fu_356_p3 <= 
        mul_ln26_3_fu_351_p2 when (icmp_ln21_1_fu_338_p2(0) = '1') else 
        mul_ln26_reg_590;
    select_ln19_2_fu_367_p3 <= 
        mul_ln26_3_fu_351_p2 when (icmp_ln21_1_fu_338_p2(0) = '1') else 
        add_ln26_reg_595;
    select_ln19_3_fu_379_p3 <= 
        icmp_ln21_reg_585 when (icmp_ln21_1_fu_338_p2(0) = '1') else 
        icmp_ln23_fu_374_p2;
    select_ln19_4_fu_496_p3 <= 
        add_ln19_1_reg_609 when (icmp_ln21_1_reg_614(0) = '1') else 
        i_0_reg_183;
    select_ln19_fu_343_p3 <= 
        ap_const_lv32_0 when (icmp_ln21_1_fu_338_p2(0) = '1') else 
        j_0_reg_207;
    select_ln21_1_fu_507_p3 <= 
        ap_const_lv64_1 when (icmp_ln21_1_reg_614(0) = '1') else 
        add_ln21_1_reg_645;
    select_ln21_fu_424_p3 <= 
        j_fu_386_p2 when (select_ln19_3_fu_379_p3(0) = '1') else 
        select_ln19_fu_343_p3;
    select_ln26_1_fu_412_p3 <= 
        add_ln26_1_fu_406_p2 when (select_ln19_3_fu_379_p3(0) = '1') else 
        select_ln19_2_fu_367_p3;
    select_ln26_fu_398_p3 <= 
        ap_const_lv32_0 when (or_ln26_fu_392_p2(0) = '1') else 
        ap_phi_mux_k_0_phi_fu_223_p4;
        sext_ln19_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln19_1_fu_356_p3),33));

        sext_ln26_1_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_4_fu_432_p2),64));

        sext_ln26_2_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_2_fu_472_p2),33));

        sext_ln26_3_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_5_fu_481_p2),64));

        sext_ln26_4_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_6_fu_447_p2),64));

        sext_ln26_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln26_1_fu_412_p3),33));

end behav;

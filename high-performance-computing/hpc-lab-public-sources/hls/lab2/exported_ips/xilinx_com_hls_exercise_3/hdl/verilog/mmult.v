// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3932262,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=28,HLS_SYN_FF=11990,HLS_SYN_LUT=10233,HLS_VERSION=2020_1}" *)

module mmult (
        ap_clk,
        ap_rst_n,
        m_axi_in1_mem_AWVALID,
        m_axi_in1_mem_AWREADY,
        m_axi_in1_mem_AWADDR,
        m_axi_in1_mem_AWID,
        m_axi_in1_mem_AWLEN,
        m_axi_in1_mem_AWSIZE,
        m_axi_in1_mem_AWBURST,
        m_axi_in1_mem_AWLOCK,
        m_axi_in1_mem_AWCACHE,
        m_axi_in1_mem_AWPROT,
        m_axi_in1_mem_AWQOS,
        m_axi_in1_mem_AWREGION,
        m_axi_in1_mem_AWUSER,
        m_axi_in1_mem_WVALID,
        m_axi_in1_mem_WREADY,
        m_axi_in1_mem_WDATA,
        m_axi_in1_mem_WSTRB,
        m_axi_in1_mem_WLAST,
        m_axi_in1_mem_WID,
        m_axi_in1_mem_WUSER,
        m_axi_in1_mem_ARVALID,
        m_axi_in1_mem_ARREADY,
        m_axi_in1_mem_ARADDR,
        m_axi_in1_mem_ARID,
        m_axi_in1_mem_ARLEN,
        m_axi_in1_mem_ARSIZE,
        m_axi_in1_mem_ARBURST,
        m_axi_in1_mem_ARLOCK,
        m_axi_in1_mem_ARCACHE,
        m_axi_in1_mem_ARPROT,
        m_axi_in1_mem_ARQOS,
        m_axi_in1_mem_ARREGION,
        m_axi_in1_mem_ARUSER,
        m_axi_in1_mem_RVALID,
        m_axi_in1_mem_RREADY,
        m_axi_in1_mem_RDATA,
        m_axi_in1_mem_RLAST,
        m_axi_in1_mem_RID,
        m_axi_in1_mem_RUSER,
        m_axi_in1_mem_RRESP,
        m_axi_in1_mem_BVALID,
        m_axi_in1_mem_BREADY,
        m_axi_in1_mem_BRESP,
        m_axi_in1_mem_BID,
        m_axi_in1_mem_BUSER,
        m_axi_in2_mem_AWVALID,
        m_axi_in2_mem_AWREADY,
        m_axi_in2_mem_AWADDR,
        m_axi_in2_mem_AWID,
        m_axi_in2_mem_AWLEN,
        m_axi_in2_mem_AWSIZE,
        m_axi_in2_mem_AWBURST,
        m_axi_in2_mem_AWLOCK,
        m_axi_in2_mem_AWCACHE,
        m_axi_in2_mem_AWPROT,
        m_axi_in2_mem_AWQOS,
        m_axi_in2_mem_AWREGION,
        m_axi_in2_mem_AWUSER,
        m_axi_in2_mem_WVALID,
        m_axi_in2_mem_WREADY,
        m_axi_in2_mem_WDATA,
        m_axi_in2_mem_WSTRB,
        m_axi_in2_mem_WLAST,
        m_axi_in2_mem_WID,
        m_axi_in2_mem_WUSER,
        m_axi_in2_mem_ARVALID,
        m_axi_in2_mem_ARREADY,
        m_axi_in2_mem_ARADDR,
        m_axi_in2_mem_ARID,
        m_axi_in2_mem_ARLEN,
        m_axi_in2_mem_ARSIZE,
        m_axi_in2_mem_ARBURST,
        m_axi_in2_mem_ARLOCK,
        m_axi_in2_mem_ARCACHE,
        m_axi_in2_mem_ARPROT,
        m_axi_in2_mem_ARQOS,
        m_axi_in2_mem_ARREGION,
        m_axi_in2_mem_ARUSER,
        m_axi_in2_mem_RVALID,
        m_axi_in2_mem_RREADY,
        m_axi_in2_mem_RDATA,
        m_axi_in2_mem_RLAST,
        m_axi_in2_mem_RID,
        m_axi_in2_mem_RUSER,
        m_axi_in2_mem_RRESP,
        m_axi_in2_mem_BVALID,
        m_axi_in2_mem_BREADY,
        m_axi_in2_mem_BRESP,
        m_axi_in2_mem_BID,
        m_axi_in2_mem_BUSER,
        m_axi_out_mem_AWVALID,
        m_axi_out_mem_AWREADY,
        m_axi_out_mem_AWADDR,
        m_axi_out_mem_AWID,
        m_axi_out_mem_AWLEN,
        m_axi_out_mem_AWSIZE,
        m_axi_out_mem_AWBURST,
        m_axi_out_mem_AWLOCK,
        m_axi_out_mem_AWCACHE,
        m_axi_out_mem_AWPROT,
        m_axi_out_mem_AWQOS,
        m_axi_out_mem_AWREGION,
        m_axi_out_mem_AWUSER,
        m_axi_out_mem_WVALID,
        m_axi_out_mem_WREADY,
        m_axi_out_mem_WDATA,
        m_axi_out_mem_WSTRB,
        m_axi_out_mem_WLAST,
        m_axi_out_mem_WID,
        m_axi_out_mem_WUSER,
        m_axi_out_mem_ARVALID,
        m_axi_out_mem_ARREADY,
        m_axi_out_mem_ARADDR,
        m_axi_out_mem_ARID,
        m_axi_out_mem_ARLEN,
        m_axi_out_mem_ARSIZE,
        m_axi_out_mem_ARBURST,
        m_axi_out_mem_ARLOCK,
        m_axi_out_mem_ARCACHE,
        m_axi_out_mem_ARPROT,
        m_axi_out_mem_ARQOS,
        m_axi_out_mem_ARREGION,
        m_axi_out_mem_ARUSER,
        m_axi_out_mem_RVALID,
        m_axi_out_mem_RREADY,
        m_axi_out_mem_RDATA,
        m_axi_out_mem_RLAST,
        m_axi_out_mem_RID,
        m_axi_out_mem_RUSER,
        m_axi_out_mem_RRESP,
        m_axi_out_mem_BVALID,
        m_axi_out_mem_BREADY,
        m_axi_out_mem_BRESP,
        m_axi_out_mem_BID,
        m_axi_out_mem_BUSER,
        s_axi_params_AWVALID,
        s_axi_params_AWREADY,
        s_axi_params_AWADDR,
        s_axi_params_WVALID,
        s_axi_params_WREADY,
        s_axi_params_WDATA,
        s_axi_params_WSTRB,
        s_axi_params_ARVALID,
        s_axi_params_ARREADY,
        s_axi_params_ARADDR,
        s_axi_params_RVALID,
        s_axi_params_RREADY,
        s_axi_params_RDATA,
        s_axi_params_RRESP,
        s_axi_params_BVALID,
        s_axi_params_BREADY,
        s_axi_params_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_pp0_stage0 = 18'd4;
parameter    ap_ST_fsm_pp0_stage1 = 18'd8;
parameter    ap_ST_fsm_pp0_stage2 = 18'd16;
parameter    ap_ST_fsm_pp0_stage3 = 18'd32;
parameter    ap_ST_fsm_pp0_stage4 = 18'd64;
parameter    ap_ST_fsm_pp0_stage5 = 18'd128;
parameter    ap_ST_fsm_pp0_stage6 = 18'd256;
parameter    ap_ST_fsm_pp0_stage7 = 18'd512;
parameter    ap_ST_fsm_pp0_stage8 = 18'd1024;
parameter    ap_ST_fsm_pp0_stage9 = 18'd2048;
parameter    ap_ST_fsm_pp0_stage10 = 18'd4096;
parameter    ap_ST_fsm_pp0_stage11 = 18'd8192;
parameter    ap_ST_fsm_pp0_stage12 = 18'd16384;
parameter    ap_ST_fsm_pp0_stage13 = 18'd32768;
parameter    ap_ST_fsm_pp0_stage14 = 18'd65536;
parameter    ap_ST_fsm_state118 = 18'd131072;
parameter    C_S_AXI_PARAMS_DATA_WIDTH = 32;
parameter    C_S_AXI_PARAMS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN1_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN1_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_IN1_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN1_MEM_USER_VALUE = 0;
parameter    C_M_AXI_IN1_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_IN1_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN2_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN2_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_IN2_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN2_MEM_USER_VALUE = 0;
parameter    C_M_AXI_IN2_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_IN2_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_OUT_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_MEM_USER_VALUE = 0;
parameter    C_M_AXI_OUT_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_MEM_CACHE_VALUE = 3;

parameter C_S_AXI_PARAMS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN1_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN2_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_MEM_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_in1_mem_AWVALID;
input   m_axi_in1_mem_AWREADY;
output  [C_M_AXI_IN1_MEM_ADDR_WIDTH - 1:0] m_axi_in1_mem_AWADDR;
output  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_AWID;
output  [7:0] m_axi_in1_mem_AWLEN;
output  [2:0] m_axi_in1_mem_AWSIZE;
output  [1:0] m_axi_in1_mem_AWBURST;
output  [1:0] m_axi_in1_mem_AWLOCK;
output  [3:0] m_axi_in1_mem_AWCACHE;
output  [2:0] m_axi_in1_mem_AWPROT;
output  [3:0] m_axi_in1_mem_AWQOS;
output  [3:0] m_axi_in1_mem_AWREGION;
output  [C_M_AXI_IN1_MEM_AWUSER_WIDTH - 1:0] m_axi_in1_mem_AWUSER;
output   m_axi_in1_mem_WVALID;
input   m_axi_in1_mem_WREADY;
output  [C_M_AXI_IN1_MEM_DATA_WIDTH - 1:0] m_axi_in1_mem_WDATA;
output  [C_M_AXI_IN1_MEM_WSTRB_WIDTH - 1:0] m_axi_in1_mem_WSTRB;
output   m_axi_in1_mem_WLAST;
output  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_WID;
output  [C_M_AXI_IN1_MEM_WUSER_WIDTH - 1:0] m_axi_in1_mem_WUSER;
output   m_axi_in1_mem_ARVALID;
input   m_axi_in1_mem_ARREADY;
output  [C_M_AXI_IN1_MEM_ADDR_WIDTH - 1:0] m_axi_in1_mem_ARADDR;
output  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_ARID;
output  [7:0] m_axi_in1_mem_ARLEN;
output  [2:0] m_axi_in1_mem_ARSIZE;
output  [1:0] m_axi_in1_mem_ARBURST;
output  [1:0] m_axi_in1_mem_ARLOCK;
output  [3:0] m_axi_in1_mem_ARCACHE;
output  [2:0] m_axi_in1_mem_ARPROT;
output  [3:0] m_axi_in1_mem_ARQOS;
output  [3:0] m_axi_in1_mem_ARREGION;
output  [C_M_AXI_IN1_MEM_ARUSER_WIDTH - 1:0] m_axi_in1_mem_ARUSER;
input   m_axi_in1_mem_RVALID;
output   m_axi_in1_mem_RREADY;
input  [C_M_AXI_IN1_MEM_DATA_WIDTH - 1:0] m_axi_in1_mem_RDATA;
input   m_axi_in1_mem_RLAST;
input  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_RID;
input  [C_M_AXI_IN1_MEM_RUSER_WIDTH - 1:0] m_axi_in1_mem_RUSER;
input  [1:0] m_axi_in1_mem_RRESP;
input   m_axi_in1_mem_BVALID;
output   m_axi_in1_mem_BREADY;
input  [1:0] m_axi_in1_mem_BRESP;
input  [C_M_AXI_IN1_MEM_ID_WIDTH - 1:0] m_axi_in1_mem_BID;
input  [C_M_AXI_IN1_MEM_BUSER_WIDTH - 1:0] m_axi_in1_mem_BUSER;
output   m_axi_in2_mem_AWVALID;
input   m_axi_in2_mem_AWREADY;
output  [C_M_AXI_IN2_MEM_ADDR_WIDTH - 1:0] m_axi_in2_mem_AWADDR;
output  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_AWID;
output  [7:0] m_axi_in2_mem_AWLEN;
output  [2:0] m_axi_in2_mem_AWSIZE;
output  [1:0] m_axi_in2_mem_AWBURST;
output  [1:0] m_axi_in2_mem_AWLOCK;
output  [3:0] m_axi_in2_mem_AWCACHE;
output  [2:0] m_axi_in2_mem_AWPROT;
output  [3:0] m_axi_in2_mem_AWQOS;
output  [3:0] m_axi_in2_mem_AWREGION;
output  [C_M_AXI_IN2_MEM_AWUSER_WIDTH - 1:0] m_axi_in2_mem_AWUSER;
output   m_axi_in2_mem_WVALID;
input   m_axi_in2_mem_WREADY;
output  [C_M_AXI_IN2_MEM_DATA_WIDTH - 1:0] m_axi_in2_mem_WDATA;
output  [C_M_AXI_IN2_MEM_WSTRB_WIDTH - 1:0] m_axi_in2_mem_WSTRB;
output   m_axi_in2_mem_WLAST;
output  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_WID;
output  [C_M_AXI_IN2_MEM_WUSER_WIDTH - 1:0] m_axi_in2_mem_WUSER;
output   m_axi_in2_mem_ARVALID;
input   m_axi_in2_mem_ARREADY;
output  [C_M_AXI_IN2_MEM_ADDR_WIDTH - 1:0] m_axi_in2_mem_ARADDR;
output  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_ARID;
output  [7:0] m_axi_in2_mem_ARLEN;
output  [2:0] m_axi_in2_mem_ARSIZE;
output  [1:0] m_axi_in2_mem_ARBURST;
output  [1:0] m_axi_in2_mem_ARLOCK;
output  [3:0] m_axi_in2_mem_ARCACHE;
output  [2:0] m_axi_in2_mem_ARPROT;
output  [3:0] m_axi_in2_mem_ARQOS;
output  [3:0] m_axi_in2_mem_ARREGION;
output  [C_M_AXI_IN2_MEM_ARUSER_WIDTH - 1:0] m_axi_in2_mem_ARUSER;
input   m_axi_in2_mem_RVALID;
output   m_axi_in2_mem_RREADY;
input  [C_M_AXI_IN2_MEM_DATA_WIDTH - 1:0] m_axi_in2_mem_RDATA;
input   m_axi_in2_mem_RLAST;
input  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_RID;
input  [C_M_AXI_IN2_MEM_RUSER_WIDTH - 1:0] m_axi_in2_mem_RUSER;
input  [1:0] m_axi_in2_mem_RRESP;
input   m_axi_in2_mem_BVALID;
output   m_axi_in2_mem_BREADY;
input  [1:0] m_axi_in2_mem_BRESP;
input  [C_M_AXI_IN2_MEM_ID_WIDTH - 1:0] m_axi_in2_mem_BID;
input  [C_M_AXI_IN2_MEM_BUSER_WIDTH - 1:0] m_axi_in2_mem_BUSER;
output   m_axi_out_mem_AWVALID;
input   m_axi_out_mem_AWREADY;
output  [C_M_AXI_OUT_MEM_ADDR_WIDTH - 1:0] m_axi_out_mem_AWADDR;
output  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_AWID;
output  [7:0] m_axi_out_mem_AWLEN;
output  [2:0] m_axi_out_mem_AWSIZE;
output  [1:0] m_axi_out_mem_AWBURST;
output  [1:0] m_axi_out_mem_AWLOCK;
output  [3:0] m_axi_out_mem_AWCACHE;
output  [2:0] m_axi_out_mem_AWPROT;
output  [3:0] m_axi_out_mem_AWQOS;
output  [3:0] m_axi_out_mem_AWREGION;
output  [C_M_AXI_OUT_MEM_AWUSER_WIDTH - 1:0] m_axi_out_mem_AWUSER;
output   m_axi_out_mem_WVALID;
input   m_axi_out_mem_WREADY;
output  [C_M_AXI_OUT_MEM_DATA_WIDTH - 1:0] m_axi_out_mem_WDATA;
output  [C_M_AXI_OUT_MEM_WSTRB_WIDTH - 1:0] m_axi_out_mem_WSTRB;
output   m_axi_out_mem_WLAST;
output  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_WID;
output  [C_M_AXI_OUT_MEM_WUSER_WIDTH - 1:0] m_axi_out_mem_WUSER;
output   m_axi_out_mem_ARVALID;
input   m_axi_out_mem_ARREADY;
output  [C_M_AXI_OUT_MEM_ADDR_WIDTH - 1:0] m_axi_out_mem_ARADDR;
output  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_ARID;
output  [7:0] m_axi_out_mem_ARLEN;
output  [2:0] m_axi_out_mem_ARSIZE;
output  [1:0] m_axi_out_mem_ARBURST;
output  [1:0] m_axi_out_mem_ARLOCK;
output  [3:0] m_axi_out_mem_ARCACHE;
output  [2:0] m_axi_out_mem_ARPROT;
output  [3:0] m_axi_out_mem_ARQOS;
output  [3:0] m_axi_out_mem_ARREGION;
output  [C_M_AXI_OUT_MEM_ARUSER_WIDTH - 1:0] m_axi_out_mem_ARUSER;
input   m_axi_out_mem_RVALID;
output   m_axi_out_mem_RREADY;
input  [C_M_AXI_OUT_MEM_DATA_WIDTH - 1:0] m_axi_out_mem_RDATA;
input   m_axi_out_mem_RLAST;
input  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_RID;
input  [C_M_AXI_OUT_MEM_RUSER_WIDTH - 1:0] m_axi_out_mem_RUSER;
input  [1:0] m_axi_out_mem_RRESP;
input   m_axi_out_mem_BVALID;
output   m_axi_out_mem_BREADY;
input  [1:0] m_axi_out_mem_BRESP;
input  [C_M_AXI_OUT_MEM_ID_WIDTH - 1:0] m_axi_out_mem_BID;
input  [C_M_AXI_OUT_MEM_BUSER_WIDTH - 1:0] m_axi_out_mem_BUSER;
input   s_axi_params_AWVALID;
output   s_axi_params_AWREADY;
input  [C_S_AXI_PARAMS_ADDR_WIDTH - 1:0] s_axi_params_AWADDR;
input   s_axi_params_WVALID;
output   s_axi_params_WREADY;
input  [C_S_AXI_PARAMS_DATA_WIDTH - 1:0] s_axi_params_WDATA;
input  [C_S_AXI_PARAMS_WSTRB_WIDTH - 1:0] s_axi_params_WSTRB;
input   s_axi_params_ARVALID;
output   s_axi_params_ARREADY;
input  [C_S_AXI_PARAMS_ADDR_WIDTH - 1:0] s_axi_params_ARADDR;
output   s_axi_params_RVALID;
input   s_axi_params_RREADY;
output  [C_S_AXI_PARAMS_DATA_WIDTH - 1:0] s_axi_params_RDATA;
output  [1:0] s_axi_params_RRESP;
output   s_axi_params_BVALID;
input   s_axi_params_BREADY;
output  [1:0] s_axi_params_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in1;
wire   [31:0] in2;
wire   [31:0] out_r;
wire   [31:0] dim;
reg    in1_mem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage10;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp0_stage10;
reg   [0:0] icmp_ln8_reg_676;
reg    in1_mem_blk_n_R;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter7;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln19_reg_600;
reg   [0:0] icmp_ln19_reg_600_pp0_iter7_reg;
reg    in2_mem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage3;
reg    in2_mem_blk_n_R;
reg    out_mem_blk_n_AR;
reg   [0:0] icmp_ln19_reg_600_pp0_iter6_reg;
reg    out_mem_blk_n_R;
reg    out_mem_blk_n_AW;
reg    out_mem_blk_n_W;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
reg    out_mem_blk_n_B;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    in1_mem_AWREADY;
wire    in1_mem_WREADY;
reg    in1_mem_ARVALID;
wire    in1_mem_ARREADY;
wire    in1_mem_RVALID;
reg    in1_mem_RREADY;
wire   [31:0] in1_mem_RDATA;
wire    in1_mem_RLAST;
wire   [0:0] in1_mem_RID;
wire   [0:0] in1_mem_RUSER;
wire   [1:0] in1_mem_RRESP;
wire    in1_mem_BVALID;
wire   [1:0] in1_mem_BRESP;
wire   [0:0] in1_mem_BID;
wire   [0:0] in1_mem_BUSER;
wire    in2_mem_AWREADY;
wire    in2_mem_WREADY;
reg    in2_mem_ARVALID;
wire    in2_mem_ARREADY;
wire    in2_mem_RVALID;
reg    in2_mem_RREADY;
wire   [31:0] in2_mem_RDATA;
wire    in2_mem_RLAST;
wire   [0:0] in2_mem_RID;
wire   [0:0] in2_mem_RUSER;
wire   [1:0] in2_mem_RRESP;
wire    in2_mem_BVALID;
wire   [1:0] in2_mem_BRESP;
wire   [0:0] in2_mem_BID;
wire   [0:0] in2_mem_BUSER;
reg    out_mem_AWVALID;
wire    out_mem_AWREADY;
reg    out_mem_WVALID;
wire    out_mem_WREADY;
reg    out_mem_ARVALID;
wire    out_mem_ARREADY;
wire    out_mem_RVALID;
reg    out_mem_RREADY;
wire   [31:0] out_mem_RDATA;
wire    out_mem_RLAST;
wire   [0:0] out_mem_RID;
wire   [0:0] out_mem_RUSER;
wire   [1:0] out_mem_RRESP;
wire    out_mem_BVALID;
reg    out_mem_BREADY;
wire   [1:0] out_mem_BRESP;
wire   [0:0] out_mem_BID;
wire   [0:0] out_mem_BUSER;
reg   [95:0] indvar_flatten18_reg_171;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state18_pp0_stage0_iter1;
wire    ap_block_state33_pp0_stage0_iter2;
wire    ap_block_state48_pp0_stage0_iter3;
wire    ap_block_state63_pp0_stage0_iter4;
wire    ap_block_state78_pp0_stage0_iter5;
wire    ap_block_state93_pp0_stage0_iter6;
wire    ap_block_state108_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
reg   [30:0] i_0_reg_183;
reg   [63:0] indvar_flatten_reg_195;
reg   [31:0] j_0_reg_207;
reg   [31:0] k_0_reg_219;
reg   [31:0] dim_read_reg_528;
reg   [29:0] tmp_reg_539;
reg   [29:0] tmp_1_reg_544;
reg   [29:0] tmp_3_reg_549;
wire   [63:0] bound_fu_265_p2;
reg   [63:0] bound_reg_554;
wire   [32:0] p_cast20_fu_271_p1;
reg   [32:0] p_cast20_reg_560;
wire    ap_CS_fsm_state2;
wire   [32:0] p_cast19_fu_274_p1;
reg   [32:0] p_cast19_reg_565;
wire   [32:0] p_cast_fu_277_p1;
reg   [32:0] p_cast_reg_570;
wire   [95:0] cast5_fu_280_p1;
reg   [95:0] cast5_reg_575;
wire   [95:0] bound7_fu_286_p2;
reg   [95:0] bound7_reg_580;
wire   [0:0] icmp_ln21_fu_292_p2;
reg   [0:0] icmp_ln21_reg_585;
wire   [31:0] mul_ln26_fu_301_p2;
reg   [31:0] mul_ln26_reg_590;
wire   [31:0] add_ln26_fu_306_p2;
reg   [31:0] add_ln26_reg_595;
wire   [0:0] icmp_ln19_fu_312_p2;
reg   [0:0] icmp_ln19_reg_600_pp0_iter1_reg;
reg   [0:0] icmp_ln19_reg_600_pp0_iter2_reg;
reg   [0:0] icmp_ln19_reg_600_pp0_iter3_reg;
reg   [0:0] icmp_ln19_reg_600_pp0_iter4_reg;
reg   [0:0] icmp_ln19_reg_600_pp0_iter5_reg;
wire   [95:0] add_ln19_fu_317_p2;
reg   [95:0] add_ln19_reg_604;
wire   [30:0] add_ln19_1_fu_328_p2;
reg   [30:0] add_ln19_1_reg_609;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state19_pp0_stage1_iter1;
wire    ap_block_state34_pp0_stage1_iter2;
wire    ap_block_state49_pp0_stage1_iter3;
wire    ap_block_state64_pp0_stage1_iter4;
wire    ap_block_state79_pp0_stage1_iter5;
wire    ap_block_state94_pp0_stage1_iter6;
wire    ap_block_state109_pp0_stage1_iter7;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln21_1_fu_338_p2;
reg   [0:0] icmp_ln21_1_reg_614;
wire  signed [31:0] select_ln26_fu_398_p3;
reg  signed [31:0] select_ln26_reg_620;
wire   [31:0] select_ln21_fu_424_p3;
reg   [31:0] select_ln21_reg_626;
reg   [31:0] in1_mem_addr_reg_632;
reg   [31:0] in1_mem_addr_reg_632_pp0_iter1_reg;
reg   [31:0] in1_mem_addr_reg_632_pp0_iter2_reg;
reg   [31:0] in1_mem_addr_reg_632_pp0_iter3_reg;
reg   [31:0] in1_mem_addr_reg_632_pp0_iter4_reg;
reg   [31:0] in1_mem_addr_reg_632_pp0_iter5_reg;
reg   [31:0] in1_mem_addr_reg_632_pp0_iter6_reg;
reg   [31:0] out_mem_addr_reg_638;
reg   [31:0] out_mem_addr_reg_638_pp0_iter1_reg;
reg   [31:0] out_mem_addr_reg_638_pp0_iter2_reg;
reg   [31:0] out_mem_addr_reg_638_pp0_iter3_reg;
reg   [31:0] out_mem_addr_reg_638_pp0_iter4_reg;
reg   [31:0] out_mem_addr_reg_638_pp0_iter5_reg;
reg   [31:0] out_mem_addr_reg_638_pp0_iter6_reg;
reg   [31:0] out_mem_addr_reg_638_pp0_iter7_reg;
wire   [63:0] add_ln21_1_fu_462_p2;
reg   [63:0] add_ln21_1_reg_645;
reg   [31:0] in2_mem_addr_reg_650;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state20_pp0_stage2_iter1;
wire    ap_block_state35_pp0_stage2_iter2;
wire    ap_block_state50_pp0_stage2_iter3;
wire    ap_block_state65_pp0_stage2_iter4;
wire    ap_block_state80_pp0_stage2_iter5;
wire    ap_block_state95_pp0_stage2_iter6;
reg    ap_block_state110_pp0_stage2_iter7;
reg    ap_block_pp0_stage2_11001;
reg  signed [31:0] in2_mem_addr_read_reg_656;
reg    ap_block_state13_pp0_stage10_iter0;
wire    ap_block_state28_pp0_stage10_iter1;
wire    ap_block_state43_pp0_stage10_iter2;
wire    ap_block_state58_pp0_stage10_iter3;
wire    ap_block_state73_pp0_stage10_iter4;
wire    ap_block_state88_pp0_stage10_iter5;
wire    ap_block_state103_pp0_stage10_iter6;
reg    ap_block_state103_io;
reg    ap_block_pp0_stage10_11001;
reg  signed [31:0] in2_mem_addr_read_reg_656_pp0_iter1_reg;
reg  signed [31:0] in2_mem_addr_read_reg_656_pp0_iter2_reg;
reg  signed [31:0] in2_mem_addr_read_reg_656_pp0_iter3_reg;
reg  signed [31:0] in2_mem_addr_read_reg_656_pp0_iter4_reg;
reg  signed [31:0] in2_mem_addr_read_reg_656_pp0_iter5_reg;
reg  signed [31:0] in2_mem_addr_read_reg_656_pp0_iter6_reg;
wire   [30:0] select_ln19_4_fu_496_p3;
reg   [30:0] select_ln19_4_reg_661;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state17_pp0_stage14_iter0;
wire    ap_block_state32_pp0_stage14_iter1;
wire    ap_block_state47_pp0_stage14_iter2;
wire    ap_block_state62_pp0_stage14_iter3;
wire    ap_block_state77_pp0_stage14_iter4;
wire    ap_block_state92_pp0_stage14_iter5;
wire    ap_block_state107_pp0_stage14_iter6;
wire    ap_block_pp0_stage14_11001;
wire   [31:0] k_fu_502_p2;
reg   [31:0] k_reg_666;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] select_ln21_1_fu_507_p3;
reg   [63:0] select_ln21_1_reg_671;
wire   [0:0] icmp_ln8_fu_513_p2;
wire    ap_block_state12_pp0_stage9_iter0;
wire    ap_block_state27_pp0_stage9_iter1;
wire    ap_block_state42_pp0_stage9_iter2;
wire    ap_block_state57_pp0_stage9_iter3;
wire    ap_block_state72_pp0_stage9_iter4;
wire    ap_block_state87_pp0_stage9_iter5;
wire    ap_block_state102_pp0_stage9_iter6;
reg    ap_block_state117_pp0_stage9_iter7;
reg    ap_block_pp0_stage9_11001;
reg  signed [31:0] in1_mem_addr_read_reg_680;
reg   [31:0] out_mem_addr_read_reg_685;
wire   [31:0] add_ln26_3_fu_523_p2;
reg   [31:0] add_ln26_3_reg_690;
wire    ap_block_state6_pp0_stage3_iter0;
reg    ap_block_state6_io;
wire    ap_block_state21_pp0_stage3_iter1;
wire    ap_block_state36_pp0_stage3_iter2;
wire    ap_block_state51_pp0_stage3_iter3;
wire    ap_block_state66_pp0_stage3_iter4;
wire    ap_block_state81_pp0_stage3_iter5;
wire    ap_block_state96_pp0_stage3_iter6;
wire    ap_block_state111_pp0_stage3_iter7;
reg    ap_block_state111_io;
reg    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage14_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [95:0] ap_phi_mux_indvar_flatten18_phi_fu_175_p4;
wire    ap_block_pp0_stage0;
reg   [30:0] ap_phi_mux_i_0_phi_fu_187_p4;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_199_p4;
wire    ap_block_pp0_stage1;
reg   [31:0] ap_phi_mux_j_0_phi_fu_211_p4;
reg   [31:0] ap_phi_mux_k_0_phi_fu_223_p4;
wire  signed [63:0] sext_ln26_1_fu_437_p1;
wire  signed [63:0] sext_ln26_4_fu_452_p1;
wire  signed [63:0] sext_ln26_3_fu_486_p1;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_state22_pp0_stage4_iter1;
wire    ap_block_state37_pp0_stage4_iter2;
wire    ap_block_state52_pp0_stage4_iter3;
wire    ap_block_state67_pp0_stage4_iter4;
wire    ap_block_state82_pp0_stage4_iter5;
wire    ap_block_state97_pp0_stage4_iter6;
wire    ap_block_state112_pp0_stage4_iter7;
reg    ap_block_state112_io;
reg    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage4_01001;
wire  signed [31:0] cast_fu_261_p0;
wire   [31:0] bound_fu_265_p0;
wire   [63:0] cast_fu_261_p1;
wire   [31:0] bound_fu_265_p1;
wire   [63:0] bound7_fu_286_p0;
wire   [31:0] bound7_fu_286_p1;
wire   [30:0] mul_ln26_fu_301_p1;
wire   [31:0] grp_fu_323_p1;
wire   [30:0] mul_ln26_3_fu_351_p1;
wire   [31:0] mul_ln26_3_fu_351_p2;
wire  signed [31:0] select_ln19_1_fu_356_p3;
wire   [0:0] icmp_ln23_fu_374_p2;
wire   [31:0] select_ln19_fu_343_p3;
wire   [0:0] select_ln19_3_fu_379_p3;
wire   [0:0] or_ln26_fu_392_p2;
wire   [31:0] j_fu_386_p2;
wire   [31:0] add_ln26_1_fu_406_p2;
wire   [31:0] select_ln19_2_fu_367_p3;
wire   [31:0] select_ln26_1_fu_412_p3;
wire  signed [32:0] sext_ln19_fu_363_p1;
wire   [32:0] add_ln26_4_fu_432_p2;
wire  signed [32:0] sext_ln26_fu_420_p1;
wire   [32:0] add_ln26_6_fu_447_p2;
wire   [31:0] mul_ln26_1_fu_468_p2;
wire   [31:0] add_ln26_2_fu_472_p2;
wire  signed [32:0] sext_ln26_2_fu_477_p1;
wire   [32:0] add_ln26_5_fu_481_p2;
wire    ap_block_pp0_stage14;
wire   [95:0] grp_fu_323_p2;
wire   [31:0] mul_ln26_2_fu_519_p2;
reg    grp_fu_323_ce;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_state23_pp0_stage5_iter1;
wire    ap_block_state38_pp0_stage5_iter2;
wire    ap_block_state53_pp0_stage5_iter3;
wire    ap_block_state68_pp0_stage5_iter4;
wire    ap_block_state83_pp0_stage5_iter5;
wire    ap_block_state98_pp0_stage5_iter6;
wire    ap_block_state113_pp0_stage5_iter7;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state9_pp0_stage6_iter0;
wire    ap_block_state24_pp0_stage6_iter1;
wire    ap_block_state39_pp0_stage6_iter2;
wire    ap_block_state54_pp0_stage6_iter3;
wire    ap_block_state69_pp0_stage6_iter4;
wire    ap_block_state84_pp0_stage6_iter5;
wire    ap_block_state99_pp0_stage6_iter6;
wire    ap_block_state114_pp0_stage6_iter7;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state10_pp0_stage7_iter0;
wire    ap_block_state25_pp0_stage7_iter1;
wire    ap_block_state40_pp0_stage7_iter2;
wire    ap_block_state55_pp0_stage7_iter3;
wire    ap_block_state70_pp0_stage7_iter4;
wire    ap_block_state85_pp0_stage7_iter5;
wire    ap_block_state100_pp0_stage7_iter6;
wire    ap_block_state115_pp0_stage7_iter7;
wire    ap_block_pp0_stage7_11001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state11_pp0_stage8_iter0;
wire    ap_block_state26_pp0_stage8_iter1;
wire    ap_block_state41_pp0_stage8_iter2;
wire    ap_block_state56_pp0_stage8_iter3;
wire    ap_block_state71_pp0_stage8_iter4;
wire    ap_block_state86_pp0_stage8_iter5;
wire    ap_block_state101_pp0_stage8_iter6;
wire    ap_block_state116_pp0_stage8_iter7;
wire    ap_block_pp0_stage8_11001;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state14_pp0_stage11_iter0;
wire    ap_block_state29_pp0_stage11_iter1;
wire    ap_block_state44_pp0_stage11_iter2;
wire    ap_block_state59_pp0_stage11_iter3;
wire    ap_block_state74_pp0_stage11_iter4;
wire    ap_block_state89_pp0_stage11_iter5;
wire    ap_block_state104_pp0_stage11_iter6;
wire    ap_block_pp0_stage11_11001;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state15_pp0_stage12_iter0;
wire    ap_block_state30_pp0_stage12_iter1;
wire    ap_block_state45_pp0_stage12_iter2;
wire    ap_block_state60_pp0_stage12_iter3;
wire    ap_block_state75_pp0_stage12_iter4;
wire    ap_block_state90_pp0_stage12_iter5;
wire    ap_block_state105_pp0_stage12_iter6;
wire    ap_block_pp0_stage12_11001;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state16_pp0_stage13_iter0;
wire    ap_block_state31_pp0_stage13_iter1;
wire    ap_block_state46_pp0_stage13_iter2;
wire    ap_block_state61_pp0_stage13_iter3;
wire    ap_block_state76_pp0_stage13_iter4;
wire    ap_block_state91_pp0_stage13_iter5;
wire    ap_block_state106_pp0_stage13_iter6;
wire    ap_block_pp0_stage13_11001;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_CS_fsm_state118;
reg   [17:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [95:0] bound7_fu_286_p00;
wire   [95:0] bound7_fu_286_p10;
wire   [31:0] mul_ln26_3_fu_351_p10;
wire   [31:0] mul_ln26_fu_301_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

mmult_params_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_PARAMS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_PARAMS_DATA_WIDTH ))
mmult_params_s_axi_U(
    .AWVALID(s_axi_params_AWVALID),
    .AWREADY(s_axi_params_AWREADY),
    .AWADDR(s_axi_params_AWADDR),
    .WVALID(s_axi_params_WVALID),
    .WREADY(s_axi_params_WREADY),
    .WDATA(s_axi_params_WDATA),
    .WSTRB(s_axi_params_WSTRB),
    .ARVALID(s_axi_params_ARVALID),
    .ARREADY(s_axi_params_ARREADY),
    .ARADDR(s_axi_params_ARADDR),
    .RVALID(s_axi_params_RVALID),
    .RREADY(s_axi_params_RREADY),
    .RDATA(s_axi_params_RDATA),
    .RRESP(s_axi_params_RRESP),
    .BVALID(s_axi_params_BVALID),
    .BREADY(s_axi_params_BREADY),
    .BRESP(s_axi_params_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in1(in1),
    .in2(in2),
    .out_r(out_r),
    .dim(dim)
);

mmult_in1_mem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN1_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN1_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN1_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN1_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN1_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN1_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN1_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN1_MEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN1_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN1_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN1_MEM_CACHE_VALUE ))
mmult_in1_mem_m_axi_U(
    .AWVALID(m_axi_in1_mem_AWVALID),
    .AWREADY(m_axi_in1_mem_AWREADY),
    .AWADDR(m_axi_in1_mem_AWADDR),
    .AWID(m_axi_in1_mem_AWID),
    .AWLEN(m_axi_in1_mem_AWLEN),
    .AWSIZE(m_axi_in1_mem_AWSIZE),
    .AWBURST(m_axi_in1_mem_AWBURST),
    .AWLOCK(m_axi_in1_mem_AWLOCK),
    .AWCACHE(m_axi_in1_mem_AWCACHE),
    .AWPROT(m_axi_in1_mem_AWPROT),
    .AWQOS(m_axi_in1_mem_AWQOS),
    .AWREGION(m_axi_in1_mem_AWREGION),
    .AWUSER(m_axi_in1_mem_AWUSER),
    .WVALID(m_axi_in1_mem_WVALID),
    .WREADY(m_axi_in1_mem_WREADY),
    .WDATA(m_axi_in1_mem_WDATA),
    .WSTRB(m_axi_in1_mem_WSTRB),
    .WLAST(m_axi_in1_mem_WLAST),
    .WID(m_axi_in1_mem_WID),
    .WUSER(m_axi_in1_mem_WUSER),
    .ARVALID(m_axi_in1_mem_ARVALID),
    .ARREADY(m_axi_in1_mem_ARREADY),
    .ARADDR(m_axi_in1_mem_ARADDR),
    .ARID(m_axi_in1_mem_ARID),
    .ARLEN(m_axi_in1_mem_ARLEN),
    .ARSIZE(m_axi_in1_mem_ARSIZE),
    .ARBURST(m_axi_in1_mem_ARBURST),
    .ARLOCK(m_axi_in1_mem_ARLOCK),
    .ARCACHE(m_axi_in1_mem_ARCACHE),
    .ARPROT(m_axi_in1_mem_ARPROT),
    .ARQOS(m_axi_in1_mem_ARQOS),
    .ARREGION(m_axi_in1_mem_ARREGION),
    .ARUSER(m_axi_in1_mem_ARUSER),
    .RVALID(m_axi_in1_mem_RVALID),
    .RREADY(m_axi_in1_mem_RREADY),
    .RDATA(m_axi_in1_mem_RDATA),
    .RLAST(m_axi_in1_mem_RLAST),
    .RID(m_axi_in1_mem_RID),
    .RUSER(m_axi_in1_mem_RUSER),
    .RRESP(m_axi_in1_mem_RRESP),
    .BVALID(m_axi_in1_mem_BVALID),
    .BREADY(m_axi_in1_mem_BREADY),
    .BRESP(m_axi_in1_mem_BRESP),
    .BID(m_axi_in1_mem_BID),
    .BUSER(m_axi_in1_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(in1_mem_ARVALID),
    .I_ARREADY(in1_mem_ARREADY),
    .I_ARADDR(in1_mem_addr_reg_632_pp0_iter6_reg),
    .I_ARID(1'd0),
    .I_ARLEN(dim_read_reg_528),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(in1_mem_RVALID),
    .I_RREADY(in1_mem_RREADY),
    .I_RDATA(in1_mem_RDATA),
    .I_RID(in1_mem_RID),
    .I_RUSER(in1_mem_RUSER),
    .I_RRESP(in1_mem_RRESP),
    .I_RLAST(in1_mem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(in1_mem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(in1_mem_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(in1_mem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(in1_mem_BRESP),
    .I_BID(in1_mem_BID),
    .I_BUSER(in1_mem_BUSER)
);

mmult_in2_mem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN2_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN2_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN2_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN2_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN2_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN2_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN2_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN2_MEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN2_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN2_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN2_MEM_CACHE_VALUE ))
mmult_in2_mem_m_axi_U(
    .AWVALID(m_axi_in2_mem_AWVALID),
    .AWREADY(m_axi_in2_mem_AWREADY),
    .AWADDR(m_axi_in2_mem_AWADDR),
    .AWID(m_axi_in2_mem_AWID),
    .AWLEN(m_axi_in2_mem_AWLEN),
    .AWSIZE(m_axi_in2_mem_AWSIZE),
    .AWBURST(m_axi_in2_mem_AWBURST),
    .AWLOCK(m_axi_in2_mem_AWLOCK),
    .AWCACHE(m_axi_in2_mem_AWCACHE),
    .AWPROT(m_axi_in2_mem_AWPROT),
    .AWQOS(m_axi_in2_mem_AWQOS),
    .AWREGION(m_axi_in2_mem_AWREGION),
    .AWUSER(m_axi_in2_mem_AWUSER),
    .WVALID(m_axi_in2_mem_WVALID),
    .WREADY(m_axi_in2_mem_WREADY),
    .WDATA(m_axi_in2_mem_WDATA),
    .WSTRB(m_axi_in2_mem_WSTRB),
    .WLAST(m_axi_in2_mem_WLAST),
    .WID(m_axi_in2_mem_WID),
    .WUSER(m_axi_in2_mem_WUSER),
    .ARVALID(m_axi_in2_mem_ARVALID),
    .ARREADY(m_axi_in2_mem_ARREADY),
    .ARADDR(m_axi_in2_mem_ARADDR),
    .ARID(m_axi_in2_mem_ARID),
    .ARLEN(m_axi_in2_mem_ARLEN),
    .ARSIZE(m_axi_in2_mem_ARSIZE),
    .ARBURST(m_axi_in2_mem_ARBURST),
    .ARLOCK(m_axi_in2_mem_ARLOCK),
    .ARCACHE(m_axi_in2_mem_ARCACHE),
    .ARPROT(m_axi_in2_mem_ARPROT),
    .ARQOS(m_axi_in2_mem_ARQOS),
    .ARREGION(m_axi_in2_mem_ARREGION),
    .ARUSER(m_axi_in2_mem_ARUSER),
    .RVALID(m_axi_in2_mem_RVALID),
    .RREADY(m_axi_in2_mem_RREADY),
    .RDATA(m_axi_in2_mem_RDATA),
    .RLAST(m_axi_in2_mem_RLAST),
    .RID(m_axi_in2_mem_RID),
    .RUSER(m_axi_in2_mem_RUSER),
    .RRESP(m_axi_in2_mem_RRESP),
    .BVALID(m_axi_in2_mem_BVALID),
    .BREADY(m_axi_in2_mem_BREADY),
    .BRESP(m_axi_in2_mem_BRESP),
    .BID(m_axi_in2_mem_BID),
    .BUSER(m_axi_in2_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(in2_mem_ARVALID),
    .I_ARREADY(in2_mem_ARREADY),
    .I_ARADDR(in2_mem_addr_reg_650),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(in2_mem_RVALID),
    .I_RREADY(in2_mem_RREADY),
    .I_RDATA(in2_mem_RDATA),
    .I_RID(in2_mem_RID),
    .I_RUSER(in2_mem_RUSER),
    .I_RRESP(in2_mem_RRESP),
    .I_RLAST(in2_mem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(in2_mem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(in2_mem_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(in2_mem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(in2_mem_BRESP),
    .I_BID(in2_mem_BID),
    .I_BUSER(in2_mem_BUSER)
);

mmult_out_mem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_MEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUT_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_MEM_CACHE_VALUE ))
mmult_out_mem_m_axi_U(
    .AWVALID(m_axi_out_mem_AWVALID),
    .AWREADY(m_axi_out_mem_AWREADY),
    .AWADDR(m_axi_out_mem_AWADDR),
    .AWID(m_axi_out_mem_AWID),
    .AWLEN(m_axi_out_mem_AWLEN),
    .AWSIZE(m_axi_out_mem_AWSIZE),
    .AWBURST(m_axi_out_mem_AWBURST),
    .AWLOCK(m_axi_out_mem_AWLOCK),
    .AWCACHE(m_axi_out_mem_AWCACHE),
    .AWPROT(m_axi_out_mem_AWPROT),
    .AWQOS(m_axi_out_mem_AWQOS),
    .AWREGION(m_axi_out_mem_AWREGION),
    .AWUSER(m_axi_out_mem_AWUSER),
    .WVALID(m_axi_out_mem_WVALID),
    .WREADY(m_axi_out_mem_WREADY),
    .WDATA(m_axi_out_mem_WDATA),
    .WSTRB(m_axi_out_mem_WSTRB),
    .WLAST(m_axi_out_mem_WLAST),
    .WID(m_axi_out_mem_WID),
    .WUSER(m_axi_out_mem_WUSER),
    .ARVALID(m_axi_out_mem_ARVALID),
    .ARREADY(m_axi_out_mem_ARREADY),
    .ARADDR(m_axi_out_mem_ARADDR),
    .ARID(m_axi_out_mem_ARID),
    .ARLEN(m_axi_out_mem_ARLEN),
    .ARSIZE(m_axi_out_mem_ARSIZE),
    .ARBURST(m_axi_out_mem_ARBURST),
    .ARLOCK(m_axi_out_mem_ARLOCK),
    .ARCACHE(m_axi_out_mem_ARCACHE),
    .ARPROT(m_axi_out_mem_ARPROT),
    .ARQOS(m_axi_out_mem_ARQOS),
    .ARREGION(m_axi_out_mem_ARREGION),
    .ARUSER(m_axi_out_mem_ARUSER),
    .RVALID(m_axi_out_mem_RVALID),
    .RREADY(m_axi_out_mem_RREADY),
    .RDATA(m_axi_out_mem_RDATA),
    .RLAST(m_axi_out_mem_RLAST),
    .RID(m_axi_out_mem_RID),
    .RUSER(m_axi_out_mem_RUSER),
    .RRESP(m_axi_out_mem_RRESP),
    .BVALID(m_axi_out_mem_BVALID),
    .BREADY(m_axi_out_mem_BREADY),
    .BRESP(m_axi_out_mem_BRESP),
    .BID(m_axi_out_mem_BID),
    .BUSER(m_axi_out_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(out_mem_ARVALID),
    .I_ARREADY(out_mem_ARREADY),
    .I_ARADDR(out_mem_addr_reg_638_pp0_iter6_reg),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(out_mem_RVALID),
    .I_RREADY(out_mem_RREADY),
    .I_RDATA(out_mem_RDATA),
    .I_RID(out_mem_RID),
    .I_RUSER(out_mem_RUSER),
    .I_RRESP(out_mem_RRESP),
    .I_RLAST(out_mem_RLAST),
    .I_AWVALID(out_mem_AWVALID),
    .I_AWREADY(out_mem_AWREADY),
    .I_AWADDR(out_mem_addr_reg_638_pp0_iter7_reg),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(out_mem_WVALID),
    .I_WREADY(out_mem_WREADY),
    .I_WDATA(add_ln26_3_reg_690),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(out_mem_BVALID),
    .I_BREADY(out_mem_BREADY),
    .I_BRESP(out_mem_BRESP),
    .I_BID(out_mem_BID),
    .I_BUSER(out_mem_BUSER)
);

mmult_urem_96ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 100 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 96 ))
mmult_urem_96ns_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_phi_mux_indvar_flatten18_phi_fu_175_p4),
    .din1(grp_fu_323_p1),
    .ce(grp_fu_323_ce),
    .dout(grp_fu_323_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage14_subdone) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage14_subdone) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage14_subdone) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage14_subdone) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage14_subdone) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage14_subdone) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage14_subdone) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_183 <= select_ln19_4_reg_661;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_reg_183 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten18_reg_171 <= add_ln19_reg_604;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten18_reg_171 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln19_reg_600_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten_reg_195 <= select_ln21_1_reg_671;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_195 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_207 <= select_ln21_reg_626;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_0_reg_207 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln19_reg_600_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        k_0_reg_219 <= k_reg_666;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_0_reg_219 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln19_reg_600 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln19_1_reg_609 <= add_ln19_1_fu_328_p2;
        add_ln21_1_reg_645 <= add_ln21_1_fu_462_p2;
        icmp_ln21_1_reg_614 <= icmp_ln21_1_fu_338_p2;
        in1_mem_addr_reg_632 <= sext_ln26_1_fu_437_p1;
        out_mem_addr_reg_638 <= sext_ln26_4_fu_452_p1;
        select_ln26_reg_620 <= select_ln26_fu_398_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln19_reg_604 <= add_ln19_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln26_3_reg_690 <= add_ln26_3_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln26_reg_595 <= add_ln26_fu_306_p2;
        icmp_ln19_reg_600 <= icmp_ln19_fu_312_p2;
        icmp_ln19_reg_600_pp0_iter1_reg <= icmp_ln19_reg_600;
        icmp_ln19_reg_600_pp0_iter2_reg <= icmp_ln19_reg_600_pp0_iter1_reg;
        icmp_ln19_reg_600_pp0_iter3_reg <= icmp_ln19_reg_600_pp0_iter2_reg;
        icmp_ln19_reg_600_pp0_iter4_reg <= icmp_ln19_reg_600_pp0_iter3_reg;
        icmp_ln19_reg_600_pp0_iter5_reg <= icmp_ln19_reg_600_pp0_iter4_reg;
        icmp_ln19_reg_600_pp0_iter6_reg <= icmp_ln19_reg_600_pp0_iter5_reg;
        icmp_ln19_reg_600_pp0_iter7_reg <= icmp_ln19_reg_600_pp0_iter6_reg;
        mul_ln26_reg_590 <= mul_ln26_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound7_reg_580 <= bound7_fu_286_p2;
        cast5_reg_575[31 : 0] <= cast5_fu_280_p1[31 : 0];
        icmp_ln21_reg_585 <= icmp_ln21_fu_292_p2;
        p_cast19_reg_565[29 : 0] <= p_cast19_fu_274_p1[29 : 0];
        p_cast20_reg_560[29 : 0] <= p_cast20_fu_271_p1[29 : 0];
        p_cast_reg_570[29 : 0] <= p_cast_fu_277_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_554 <= bound_fu_265_p2;
        dim_read_reg_528 <= dim;
        tmp_1_reg_544 <= {{in2[31:2]}};
        tmp_3_reg_549 <= {{in1[31:2]}};
        tmp_reg_539 <= {{out_r[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln19_reg_600_pp0_iter6_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        icmp_ln8_reg_676 <= icmp_ln8_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        in1_mem_addr_read_reg_680 <= in1_mem_RDATA;
        out_mem_addr_read_reg_685 <= out_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in1_mem_addr_reg_632_pp0_iter1_reg <= in1_mem_addr_reg_632;
        in1_mem_addr_reg_632_pp0_iter2_reg <= in1_mem_addr_reg_632_pp0_iter1_reg;
        in1_mem_addr_reg_632_pp0_iter3_reg <= in1_mem_addr_reg_632_pp0_iter2_reg;
        in1_mem_addr_reg_632_pp0_iter4_reg <= in1_mem_addr_reg_632_pp0_iter3_reg;
        in1_mem_addr_reg_632_pp0_iter5_reg <= in1_mem_addr_reg_632_pp0_iter4_reg;
        in1_mem_addr_reg_632_pp0_iter6_reg <= in1_mem_addr_reg_632_pp0_iter5_reg;
        out_mem_addr_reg_638_pp0_iter1_reg <= out_mem_addr_reg_638;
        out_mem_addr_reg_638_pp0_iter2_reg <= out_mem_addr_reg_638_pp0_iter1_reg;
        out_mem_addr_reg_638_pp0_iter3_reg <= out_mem_addr_reg_638_pp0_iter2_reg;
        out_mem_addr_reg_638_pp0_iter4_reg <= out_mem_addr_reg_638_pp0_iter3_reg;
        out_mem_addr_reg_638_pp0_iter5_reg <= out_mem_addr_reg_638_pp0_iter4_reg;
        out_mem_addr_reg_638_pp0_iter6_reg <= out_mem_addr_reg_638_pp0_iter5_reg;
        out_mem_addr_reg_638_pp0_iter7_reg <= out_mem_addr_reg_638_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln19_reg_600 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        in2_mem_addr_read_reg_656 <= in2_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        in2_mem_addr_read_reg_656_pp0_iter1_reg <= in2_mem_addr_read_reg_656;
        in2_mem_addr_read_reg_656_pp0_iter2_reg <= in2_mem_addr_read_reg_656_pp0_iter1_reg;
        in2_mem_addr_read_reg_656_pp0_iter3_reg <= in2_mem_addr_read_reg_656_pp0_iter2_reg;
        in2_mem_addr_read_reg_656_pp0_iter4_reg <= in2_mem_addr_read_reg_656_pp0_iter3_reg;
        in2_mem_addr_read_reg_656_pp0_iter5_reg <= in2_mem_addr_read_reg_656_pp0_iter4_reg;
        in2_mem_addr_read_reg_656_pp0_iter6_reg <= in2_mem_addr_read_reg_656_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln19_reg_600 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        in2_mem_addr_reg_650 <= sext_ln26_3_fu_486_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_666 <= k_fu_502_p2;
        select_ln21_1_reg_671 <= select_ln21_1_fu_507_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln19_reg_600 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln19_4_reg_661 <= select_ln19_4_fu_496_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln19_reg_600 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln21_reg_626 <= select_ln21_fu_424_p3;
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_312_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_187_p4 = select_ln19_4_reg_661;
    end else begin
        ap_phi_mux_i_0_phi_fu_187_p4 = i_0_reg_183;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten18_phi_fu_175_p4 = add_ln19_reg_604;
    end else begin
        ap_phi_mux_indvar_flatten18_phi_fu_175_p4 = indvar_flatten18_reg_171;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln19_reg_600_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_199_p4 = select_ln21_1_reg_671;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_199_p4 = indvar_flatten_reg_195;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_211_p4 = select_ln21_reg_626;
    end else begin
        ap_phi_mux_j_0_phi_fu_211_p4 = j_0_reg_207;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln19_reg_600_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_k_0_phi_fu_223_p4 = k_reg_666;
    end else begin
        ap_phi_mux_k_0_phi_fu_223_p4 = k_0_reg_219;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)))) begin
        grp_fu_323_ce = 1'b1;
    end else begin
        grp_fu_323_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln8_reg_676 == 1'd1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        in1_mem_ARVALID = 1'b1;
    end else begin
        in1_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        in1_mem_RREADY = 1'b1;
    end else begin
        in1_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_676 == 1'd1) & (1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        in1_mem_blk_n_AR = m_axi_in1_mem_ARREADY;
    end else begin
        in1_mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        in1_mem_blk_n_R = m_axi_in1_mem_RVALID;
    end else begin
        in1_mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        in2_mem_ARVALID = 1'b1;
    end else begin
        in2_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        in2_mem_RREADY = 1'b1;
    end else begin
        in2_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        in2_mem_blk_n_AR = m_axi_in2_mem_ARREADY;
    end else begin
        in2_mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        in2_mem_blk_n_R = m_axi_in2_mem_RVALID;
    end else begin
        in2_mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln19_reg_600_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        out_mem_ARVALID = 1'b1;
    end else begin
        out_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        out_mem_AWVALID = 1'b1;
    end else begin
        out_mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        out_mem_BREADY = 1'b1;
    end else begin
        out_mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_mem_RREADY = 1'b1;
    end else begin
        out_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        out_mem_WVALID = 1'b1;
    end else begin
        out_mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_600_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        out_mem_blk_n_AR = m_axi_out_mem_ARREADY;
    end else begin
        out_mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        out_mem_blk_n_AW = m_axi_out_mem_AWREADY;
    end else begin
        out_mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        out_mem_blk_n_B = m_axi_out_mem_BVALID;
    end else begin
        out_mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_mem_blk_n_R = m_axi_out_mem_RVALID;
    end else begin
        out_mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        out_mem_blk_n_W = m_axi_out_mem_WREADY;
    end else begin
        out_mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln19_fu_312_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln19_fu_312_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((~((1'b0 == ap_block_pp0_stage9_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter7 == 1'b1)) & (1'b0 == ap_block_pp0_stage9_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else if (((1'b0 == ap_block_pp0_stage9_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_1_fu_328_p2 = (i_0_reg_183 + 31'd1);

assign add_ln19_fu_317_p2 = (ap_phi_mux_indvar_flatten18_phi_fu_175_p4 + 96'd1);

assign add_ln21_1_fu_462_p2 = (ap_phi_mux_indvar_flatten_phi_fu_199_p4 + 64'd1);

assign add_ln26_1_fu_406_p2 = ($signed(j_fu_386_p2) + $signed(select_ln19_1_fu_356_p3));

assign add_ln26_2_fu_472_p2 = (mul_ln26_1_fu_468_p2 + select_ln21_reg_626);

assign add_ln26_3_fu_523_p2 = (out_mem_addr_read_reg_685 + mul_ln26_2_fu_519_p2);

assign add_ln26_4_fu_432_p2 = ($signed(sext_ln19_fu_363_p1) + $signed(p_cast_reg_570));

assign add_ln26_5_fu_481_p2 = ($signed(sext_ln26_2_fu_477_p1) + $signed(p_cast19_reg_565));

assign add_ln26_6_fu_447_p2 = ($signed(sext_ln26_fu_420_p1) + $signed(p_cast20_reg_560));

assign add_ln26_fu_306_p2 = (mul_ln26_fu_301_p2 + ap_phi_mux_j_0_phi_fu_211_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = (((in2_mem_RVALID == 1'b0) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state103_io) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = (((in2_mem_RVALID == 1'b0) & (icmp_ln19_reg_600 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state103_io) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (((out_mem_RVALID == 1'b0) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0)) | ((in1_mem_RVALID == 1'b0) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter7 == 1'b1) & (((out_mem_RVALID == 1'b0) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0)) | ((in1_mem_RVALID == 1'b0) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0))));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state111_io) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state111_io) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((1'b1 == ap_block_state112_io) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((1'b1 == ap_block_state112_io) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((out_mem_BVALID == 1'b0) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((out_mem_BVALID == 1'b0) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

assign ap_block_state100_pp0_stage7_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage8_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp0_stage9_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state103_io = (((out_mem_ARREADY == 1'b0) & (icmp_ln19_reg_600_pp0_iter6_reg == 1'd0)) | ((in1_mem_ARREADY == 1'b0) & (icmp_ln8_reg_676 == 1'd1)));
end

assign ap_block_state103_pp0_stage10_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp0_stage11_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp0_stage12_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage13_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage14_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state110_pp0_stage2_iter7 = (((out_mem_RVALID == 1'b0) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0)) | ((in1_mem_RVALID == 1'b0) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0)));
end

always @ (*) begin
    ap_block_state111_io = ((out_mem_AWREADY == 1'b0) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0));
end

assign ap_block_state111_pp0_stage3_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state112_io = ((out_mem_WREADY == 1'b0) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0));
end

assign ap_block_state112_pp0_stage4_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp0_stage5_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp0_stage6_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp0_stage7_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp0_stage8_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state117_pp0_stage9_iter7 = ((out_mem_BVALID == 1'b0) & (icmp_ln19_reg_600_pp0_iter7_reg == 1'd0));
end

assign ap_block_state11_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage10_iter0 = ((in2_mem_RVALID == 1'b0) & (icmp_ln19_reg_600 == 1'd0));
end

assign ap_block_state14_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage12_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage13_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage14_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage10_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage11_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage12_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage13_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage14_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage8_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage9_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage10_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage11_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage12_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage13_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage14_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage6_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((in2_mem_ARREADY == 1'b0) & (icmp_ln19_reg_600 == 1'd0));
end

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage7_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage8_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage9_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage10_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage11_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage12_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage13_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage14_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage5_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage6_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage7_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage8_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage9_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage10_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage11_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage12_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage13_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage14_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage5_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage6_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound7_fu_286_p0 = bound7_fu_286_p00;

assign bound7_fu_286_p00 = bound_reg_554;

assign bound7_fu_286_p1 = bound7_fu_286_p10;

assign bound7_fu_286_p10 = dim_read_reg_528;

assign bound7_fu_286_p2 = (bound7_fu_286_p0 * bound7_fu_286_p1);

assign bound_fu_265_p0 = cast_fu_261_p1;

assign bound_fu_265_p1 = cast_fu_261_p1;

assign bound_fu_265_p2 = (bound_fu_265_p0 * bound_fu_265_p1);

assign cast5_fu_280_p1 = dim_read_reg_528;

assign cast_fu_261_p0 = dim;

assign cast_fu_261_p1 = $unsigned(cast_fu_261_p0);

assign grp_fu_323_p1 = cast5_reg_575;

assign icmp_ln19_fu_312_p2 = ((ap_phi_mux_indvar_flatten18_phi_fu_175_p4 == bound7_reg_580) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_338_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_199_p4 == bound_reg_554) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_292_p2 = ((dim_read_reg_528 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_374_p2 = ((ap_phi_mux_k_0_phi_fu_223_p4 == dim_read_reg_528) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_513_p2 = ((grp_fu_323_p2 == 96'd0) ? 1'b1 : 1'b0);

assign j_fu_386_p2 = (select_ln19_fu_343_p3 + 32'd1);

assign k_fu_502_p2 = ($signed(select_ln26_reg_620) + $signed(32'd1));

assign mul_ln26_1_fu_468_p2 = ($signed({{1'b0}, {dim_read_reg_528}}) * $signed(select_ln26_reg_620));

assign mul_ln26_2_fu_519_p2 = ($signed(in2_mem_addr_read_reg_656_pp0_iter6_reg) * $signed(in1_mem_addr_read_reg_680));

assign mul_ln26_3_fu_351_p1 = mul_ln26_3_fu_351_p10;

assign mul_ln26_3_fu_351_p10 = add_ln19_1_fu_328_p2;

assign mul_ln26_3_fu_351_p2 = (dim_read_reg_528 * mul_ln26_3_fu_351_p1);

assign mul_ln26_fu_301_p1 = mul_ln26_fu_301_p10;

assign mul_ln26_fu_301_p10 = ap_phi_mux_i_0_phi_fu_187_p4;

assign mul_ln26_fu_301_p2 = (dim_read_reg_528 * mul_ln26_fu_301_p1);

assign or_ln26_fu_392_p2 = (select_ln19_3_fu_379_p3 | icmp_ln21_1_fu_338_p2);

assign p_cast19_fu_274_p1 = tmp_1_reg_544;

assign p_cast20_fu_271_p1 = tmp_reg_539;

assign p_cast_fu_277_p1 = tmp_3_reg_549;

assign select_ln19_1_fu_356_p3 = ((icmp_ln21_1_fu_338_p2[0:0] === 1'b1) ? mul_ln26_3_fu_351_p2 : mul_ln26_reg_590);

assign select_ln19_2_fu_367_p3 = ((icmp_ln21_1_fu_338_p2[0:0] === 1'b1) ? mul_ln26_3_fu_351_p2 : add_ln26_reg_595);

assign select_ln19_3_fu_379_p3 = ((icmp_ln21_1_fu_338_p2[0:0] === 1'b1) ? icmp_ln21_reg_585 : icmp_ln23_fu_374_p2);

assign select_ln19_4_fu_496_p3 = ((icmp_ln21_1_reg_614[0:0] === 1'b1) ? add_ln19_1_reg_609 : i_0_reg_183);

assign select_ln19_fu_343_p3 = ((icmp_ln21_1_fu_338_p2[0:0] === 1'b1) ? 32'd0 : j_0_reg_207);

assign select_ln21_1_fu_507_p3 = ((icmp_ln21_1_reg_614[0:0] === 1'b1) ? 64'd1 : add_ln21_1_reg_645);

assign select_ln21_fu_424_p3 = ((select_ln19_3_fu_379_p3[0:0] === 1'b1) ? j_fu_386_p2 : select_ln19_fu_343_p3);

assign select_ln26_1_fu_412_p3 = ((select_ln19_3_fu_379_p3[0:0] === 1'b1) ? add_ln26_1_fu_406_p2 : select_ln19_2_fu_367_p3);

assign select_ln26_fu_398_p3 = ((or_ln26_fu_392_p2[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_k_0_phi_fu_223_p4);

assign sext_ln19_fu_363_p1 = select_ln19_1_fu_356_p3;

assign sext_ln26_1_fu_437_p1 = $signed(add_ln26_4_fu_432_p2);

assign sext_ln26_2_fu_477_p1 = $signed(add_ln26_2_fu_472_p2);

assign sext_ln26_3_fu_486_p1 = $signed(add_ln26_5_fu_481_p2);

assign sext_ln26_4_fu_452_p1 = $signed(add_ln26_6_fu_447_p2);

assign sext_ln26_fu_420_p1 = $signed(select_ln26_1_fu_412_p3);

always @ (posedge ap_clk) begin
    p_cast20_reg_560[32:30] <= 3'b000;
    p_cast19_reg_565[32:30] <= 3'b000;
    p_cast_reg_570[32:30] <= 3'b000;
    cast5_reg_575[95:32] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //mmult
